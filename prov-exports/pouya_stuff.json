{"used_data":["./assets/alb_esp1.mid","./assets/alb_esp1.mp3"],"epochs":[{"kernel_start_time":"Wed, 10 Jul 2024 16:01:04 GMT","language":"python","language_version":"3.9.6","language_mimetype":"text/x-python","kernel":"ipython","kernel_version":"7.34.0","user_agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36","modules":{"librosa":{"version":""},"numpy":{"alias":"np","version":"1.26.4"},"fastdtw":{"imports":["fastdtw"],"version":"0.3.4"},"google.colab":{"imports":["files"],"version":""},"librosa.display":{"version":""},"matplotlib.pyplot":{"alias":"plt","version":""},"pretty_midi":{"version":""},"scipy.spatial.distance":{"imports":["euclidean"],"version":""},"hmmlearn":{"imports":["hmm"],"version":""},"mir_eval":{"version":"0.7"},"tensorflow":{"alias":"tf","version":""},"tensorflow.keras.models":{"imports":["Sequential"],"version":""},"tensorflow.keras.layers":{"imports":["Dense","Dropout"],"version":""},"sklearn.model_selection":{"imports":["train_test_split"],"version":""}},"execution_data":[{"execution_count":1,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install librosa\n\n!pip install dtw-python","cell_id":"5f7ad7c9-642d-4251-a148-b21334b1d018","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Collecting librosa\n  Downloading librosa-0.10.2.post1-py3-none-any.whl (260 kB)\n\u001b[K     |████████████████████████████████| 260 kB 11.1 MB/s eta 0:00:01\n\u001b[?25hCollecting msgpack>=1.0\n  Using cached msgpack-1.0.8-cp39-cp39-macosx_11_0_arm64.whl (85 kB)\nCollecting scikit-learn>=0.20.0\n  Downloading scikit_learn-1.5.1-cp39-cp39-macosx_12_0_arm64.whl (11.0 MB)\n\u001b[K     |████████████████████████████████| 11.0 MB 4.9 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: joblib>=0.14 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.0.1)\nCollecting soundfile>=0.12.1\n  Downloading soundfile-0.12.1-py2.py3-none-macosx_11_0_arm64.whl (1.1 MB)\n\u001b[K     |████████████████████████████████| 1.1 MB 4.2 MB/s eta 0:00:01\n\u001b[?25hCollecting soxr>=0.3.2\n  Downloading soxr-0.3.7-cp39-cp39-macosx_11_0_arm64.whl (390 kB)\n\u001b[K     |████████████████████████████████| 390 kB 3.7 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: typing-extensions>=4.1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (4.12.2)\nRequirement already satisfied: scipy>=1.2.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.13.1)\nRequirement already satisfied: decorator>=4.3.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (5.1.1)\nCollecting lazy-loader>=0.1\n  Downloading lazy_loader-0.4-py3-none-any.whl (12 kB)\nCollecting numba>=0.51.0\n  Downloading numba-0.60.0-cp39-cp39-macosx_11_0_arm64.whl (2.7 MB)\n\u001b[K     |████████████████████████████████| 2.7 MB 4.2 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.26.4)\nCollecting pooch>=1.1\n  Downloading pooch-1.8.2-py3-none-any.whl (64 kB)\n\u001b[K     |████████████████████████████████| 64 kB 2.1 MB/s eta 0:00:01\n\u001b[?25hCollecting audioread>=2.1.9\n  Downloading audioread-3.0.1-py3-none-any.whl (23 kB)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from lazy-loader>=0.1->librosa) (24.1)\nCollecting llvmlite<0.44,>=0.43.0dev0\n  Downloading llvmlite-0.43.0-cp39-cp39-macosx_11_0_arm64.whl (28.8 MB)\n\u001b[K     |████████████████████████████████| 28.8 MB 637 kB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: requests>=2.19.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (2.31.0)\nRequirement already satisfied: platformdirs>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (4.2.2)\nRequirement already satisfied: idna<4,>=2.5 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.2.2)\nRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2020.12.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\nCollecting joblib>=0.14\n  Downloading joblib-1.4.2-py3-none-any.whl (301 kB)\n\u001b[K     |████████████████████████████████| 301 kB 4.2 MB/s eta 0:00:01\n\u001b[?25hCollecting threadpoolctl>=3.1.0\n  Downloading threadpoolctl-3.5.0-py3-none-any.whl (18 kB)\nRequirement already satisfied: cffi>=1.0 in ./prov-env/lib/python3.9/site-packages (from soundfile>=0.12.1->librosa) (1.16.0)\nRequirement already satisfied: pycparser in ./prov-env/lib/python3.9/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\nInstalling collected packages: threadpoolctl, llvmlite, joblib, soxr, soundfile, scikit-learn, pooch, numba, msgpack, lazy-loader, audioread, librosa\n  Attempting uninstall: joblib\n    Found existing installation: joblib 1.0.1\n    Uninstalling joblib-1.0.1:\n      Successfully uninstalled joblib-1.0.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ncrim-intervals 2.0.37 requires joblib==1.0.1, but you have joblib 1.4.2 which is incompatible.\u001b[0m\nSuccessfully installed audioread-3.0.1 joblib-1.4.2 lazy-loader-0.4 librosa-0.10.2.post1 llvmlite-0.43.0 msgpack-1.0.8 numba-0.60.0 pooch-1.8.2 scikit-learn-1.5.1 soundfile-0.12.1 soxr-0.3.7 threadpoolctl-3.5.0\nCollecting dtw-python\n  Downloading dtw_python-1.5.1-cp39-cp39-macosx_11_0_arm64.whl (382 kB)\n\u001b[K     |████████████████████████████████| 382 kB 5.2 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: numpy>=1.23.5 in ./prov-env/lib/python3.9/site-packages (from dtw-python) (1.26.4)\nRequirement already satisfied: scipy in ./prov-env/lib/python3.9/site-packages (from dtw-python) (1.13.1)\nInstalling collected packages: dtw-python\nSuccessfully installed dtw-python-1.5.1\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:04 GMT"},{"execution_count":2,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install librosa scikit-learn\n","cell_id":"a7d34632-b372-4df2-8395-6cd5680d5649","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Requirement already satisfied: librosa in ./prov-env/lib/python3.9/site-packages (0.10.2.post1)\nRequirement already satisfied: scikit-learn in ./prov-env/lib/python3.9/site-packages (1.5.1)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.26.4)\nRequirement already satisfied: scipy>=1.2.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.13.1)\nRequirement already satisfied: numba>=0.51.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.60.0)\nRequirement already satisfied: audioread>=2.1.9 in ./prov-env/lib/python3.9/site-packages (from librosa) (3.0.1)\nRequirement already satisfied: soundfile>=0.12.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.12.1)\nRequirement already satisfied: decorator>=4.3.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (5.1.1)\nRequirement already satisfied: pooch>=1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.8.2)\nRequirement already satisfied: typing-extensions>=4.1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (4.12.2)\nRequirement already satisfied: msgpack>=1.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.0.8)\nRequirement already satisfied: lazy-loader>=0.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.4)\nRequirement already satisfied: soxr>=0.3.2 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.3.7)\nRequirement already satisfied: joblib>=0.14 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.4.2)\nRequirement already satisfied: threadpoolctl>=3.1.0 in ./prov-env/lib/python3.9/site-packages (from scikit-learn) (3.5.0)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from lazy-loader>=0.1->librosa) (24.1)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in ./prov-env/lib/python3.9/site-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (4.2.2)\nRequirement already satisfied: requests>=2.19.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (2.31.0)\nRequirement already satisfied: idna<4,>=2.5 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.1)\nRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2020.12.5)\nRequirement already satisfied: urllib3<3,>=1.21.1 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.2.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\nRequirement already satisfied: cffi>=1.0 in ./prov-env/lib/python3.9/site-packages (from soundfile>=0.12.1->librosa) (1.16.0)\nRequirement already satisfied: pycparser in ./prov-env/lib/python3.9/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:05 GMT"},{"execution_count":3,"used_data":[],"data_vars":[],"execution_info":[],"code":"!wget http://opihi.cs.uvic.ca/sound/genres.tar.gz\n!tar -xf genres.tar.gz\n","cell_id":"c8d63398-3d0e-4f57-aedc-3cade3bce56b","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"zsh:1: command not found: wget\ntar: Error opening archive: Failed to open 'genres.tar.gz'\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:05 GMT"},{"execution_count":4,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install aubio\n","cell_id":"9dae3bca-739e-4a1b-890d-528c49dd248c","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Collecting aubio\n  Downloading aubio-0.4.9.tar.gz (479 kB)\n\u001b[K     |████████████████████████████████| 479 kB 6.7 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: numpy in ./prov-env/lib/python3.9/site-packages (from aubio) (1.26.4)\nUsing legacy 'setup.py install' for aubio, since package 'wheel' is not installed.\nInstalling collected packages: aubio\n    Running setup.py install for aubio ... \u001b[?25ldone\n\u001b[?25hSuccessfully installed aubio-0.4.9\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:29 GMT"},{"execution_count":5,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install pretty_midi\n","cell_id":"866a8011-b2b5-431b-ae6b-57af18f717fb","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Collecting pretty_midi\n  Downloading pretty_midi-0.2.10.tar.gz (5.6 MB)\n\u001b[K     |████████████████████████████████| 5.6 MB 916 kB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: numpy>=1.7.0 in ./prov-env/lib/python3.9/site-packages (from pretty_midi) (1.26.4)\nCollecting mido>=1.1.16\n  Downloading mido-1.3.2-py3-none-any.whl (54 kB)\n\u001b[K     |████████████████████████████████| 54 kB 4.8 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: six in ./prov-env/lib/python3.9/site-packages (from pretty_midi) (1.16.0)\nCollecting packaging~=23.1\n  Downloading packaging-23.2-py3-none-any.whl (53 kB)\n\u001b[K     |████████████████████████████████| 53 kB 4.6 MB/s eta 0:00:01\n\u001b[?25hUsing legacy 'setup.py install' for pretty-midi, since package 'wheel' is not installed.\nInstalling collected packages: packaging, mido, pretty-midi\n  Attempting uninstall: packaging\n    Found existing installation: packaging 24.1\n    Uninstalling packaging-24.1:\n      Successfully uninstalled packaging-24.1\n    Running setup.py install for pretty-midi ... \u001b[?25ldone\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ncrim-intervals 2.0.37 requires joblib==1.0.1, but you have joblib 1.4.2 which is incompatible.\u001b[0m\n\u001b[?25hSuccessfully installed mido-1.3.2 packaging-23.2 pretty-midi-0.2.10\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:48 GMT"},{"execution_count":6,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip uninstall -y librosa\n","cell_id":"80023042-ba80-499b-a16e-f526d09187a4","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Found existing installation: librosa 0.10.2.post1\nUninstalling librosa-0.10.2.post1:\n  Successfully uninstalled librosa-0.10.2.post1\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:49 GMT"},{"execution_count":7,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install librosa\n","cell_id":"55bdadf6-8dee-4dee-a18e-8faf71deeda8","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Collecting librosa\n  Using cached librosa-0.10.2.post1-py3-none-any.whl (260 kB)\nRequirement already satisfied: scikit-learn>=0.20.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.5.1)\nRequirement already satisfied: numba>=0.51.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.60.0)\nRequirement already satisfied: lazy-loader>=0.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.4)\nRequirement already satisfied: audioread>=2.1.9 in ./prov-env/lib/python3.9/site-packages (from librosa) (3.0.1)\nRequirement already satisfied: pooch>=1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.8.2)\nRequirement already satisfied: scipy>=1.2.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.13.1)\nRequirement already satisfied: joblib>=0.14 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.4.2)\nRequirement already satisfied: decorator>=4.3.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (5.1.1)\nRequirement already satisfied: typing-extensions>=4.1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (4.12.2)\nRequirement already satisfied: soundfile>=0.12.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.12.1)\nRequirement already satisfied: soxr>=0.3.2 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.3.7)\nRequirement already satisfied: msgpack>=1.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.0.8)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.26.4)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from lazy-loader>=0.1->librosa) (23.2)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in ./prov-env/lib/python3.9/site-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (4.2.2)\nRequirement already satisfied: requests>=2.19.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (2.31.0)\nRequirement already satisfied: idna<4,>=2.5 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.2.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\nRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2020.12.5)\nRequirement already satisfied: threadpoolctl>=3.1.0 in ./prov-env/lib/python3.9/site-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in ./prov-env/lib/python3.9/site-packages (from soundfile>=0.12.1->librosa) (1.16.0)\nRequirement already satisfied: pycparser in ./prov-env/lib/python3.9/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\nInstalling collected packages: librosa\nSuccessfully installed librosa-0.10.2.post1\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:50 GMT"},{"execution_count":8,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install --upgrade librosa\n","cell_id":"a2f75e99-21ec-411f-843b-297199824e70","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Requirement already satisfied: librosa in ./prov-env/lib/python3.9/site-packages (0.10.2.post1)\nRequirement already satisfied: audioread>=2.1.9 in ./prov-env/lib/python3.9/site-packages (from librosa) (3.0.1)\nRequirement already satisfied: joblib>=0.14 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.4.2)\nRequirement already satisfied: scipy>=1.2.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.13.1)\nRequirement already satisfied: numba>=0.51.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.60.0)\nRequirement already satisfied: soxr>=0.3.2 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.3.7)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.26.4)\nRequirement already satisfied: typing-extensions>=4.1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (4.12.2)\nRequirement already satisfied: msgpack>=1.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.0.8)\nRequirement already satisfied: pooch>=1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.8.2)\nRequirement already satisfied: soundfile>=0.12.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.12.1)\nRequirement already satisfied: decorator>=4.3.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (5.1.1)\nRequirement already satisfied: scikit-learn>=0.20.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.5.1)\nRequirement already satisfied: lazy-loader>=0.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.4)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from lazy-loader>=0.1->librosa) (23.2)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in ./prov-env/lib/python3.9/site-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (4.2.2)\nRequirement already satisfied: requests>=2.19.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (2.31.0)\nRequirement already satisfied: idna<4,>=2.5 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\nRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2020.12.5)\nRequirement already satisfied: urllib3<3,>=1.21.1 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.2.2)\nRequirement already satisfied: threadpoolctl>=3.1.0 in ./prov-env/lib/python3.9/site-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in ./prov-env/lib/python3.9/site-packages (from soundfile>=0.12.1->librosa) (1.16.0)\nRequirement already satisfied: pycparser in ./prov-env/lib/python3.9/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:01:51 GMT"},{"execution_count":9,"used_data":[],"data_vars":[],"execution_info":[{"name":"audio_file_1","type":"assign","dependencies":["audio_filename1"],"lineno":9,"end_lineno":9,"col_offset":0,"end_col_offset":30},{"name":"audio_file_2","type":"assign","dependencies":["audio_filename2"],"lineno":10,"end_lineno":10,"col_offset":0,"end_col_offset":30},{"name":"y1","type":"assign","dependencies":["librosa","audio_file_1"],"lineno":13,"end_lineno":13,"col_offset":0,"end_col_offset":45},{"name":"sr1","type":"assign","dependencies":["librosa","audio_file_1"],"lineno":13,"end_lineno":13,"col_offset":0,"end_col_offset":45},{"name":"y2","type":"assign","dependencies":["librosa","audio_file_2"],"lineno":14,"end_lineno":14,"col_offset":0,"end_col_offset":45},{"name":"sr2","type":"assign","dependencies":["librosa","audio_file_2"],"lineno":14,"end_lineno":14,"col_offset":0,"end_col_offset":45},{"name":"print","type":"call","dependencies":["y1"],"lineno":15,"end_lineno":15,"col_offset":0,"end_col_offset":9},{"name":"print","type":"call","dependencies":["sr1"],"lineno":16,"end_lineno":16,"col_offset":0,"end_col_offset":10},{"name":"min_length","type":"assign","dependencies":["min","len","y1","y2"],"lineno":18,"end_lineno":18,"col_offset":0,"end_col_offset":34},{"name":"y1","type":"assign","dependencies":["y1","min_length"],"lineno":19,"end_lineno":19,"col_offset":0,"end_col_offset":20},{"name":"y2","type":"assign","dependencies":["y2","min_length"],"lineno":20,"end_lineno":20,"col_offset":0,"end_col_offset":20},{"name":"mfccs_1","type":"assign","dependencies":["librosa","y1","sr1"],"lineno":23,"end_lineno":23,"col_offset":0,"end_col_offset":55},{"name":"mfccs_2","type":"assign","dependencies":["librosa","y2","sr2"],"lineno":24,"end_lineno":24,"col_offset":0,"end_col_offset":55},{"name":"path_array","type":"assign","dependencies":["np","path"],"lineno":27,"end_lineno":27,"col_offset":0,"end_col_offset":27},{"name":"feature_1","type":"assign","dependencies":["mfccs_1"],"lineno":30,"end_lineno":30,"col_offset":0,"end_col_offset":21},{"name":"feature_2","type":"assign","dependencies":["mfccs_2"],"lineno":31,"end_lineno":31,"col_offset":0,"end_col_offset":21},{"name":"distance","type":"assign","dependencies":["fastdtw","feature_1","feature_2"],"lineno":44,"end_lineno":44,"col_offset":0,"end_col_offset":46},{"name":"path","type":"assign","dependencies":["fastdtw","feature_1","feature_2"],"lineno":44,"end_lineno":44,"col_offset":0,"end_col_offset":46},{"name":"print","type":"call","dependencies":["distance"],"lineno":47,"end_lineno":47,"col_offset":0,"end_col_offset":34},{"name":"alignment_matrix","type":"assign","dependencies":["np","len","feature_1","feature_2"],"lineno":51,"end_lineno":51,"col_offset":0,"end_col_offset":61},{"type":"loop","lineno":54,"end_lineno":55,"col_offset":0,"end_col_offset":30,"body":[],"orelse":[],"dependencies":["path"]},{"name":"plt","type":"call","dependencies":["alignment_matrix"],"lineno":58,"end_lineno":58,"col_offset":0,"end_col_offset":82},{"name":"plt","type":"call","dependencies":[],"lineno":59,"end_lineno":59,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":60,"end_lineno":60,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":61,"end_lineno":61,"col_offset":0,"end_col_offset":29},{"name":"plt","type":"call","dependencies":[],"lineno":62,"end_lineno":62,"col_offset":0,"end_col_offset":10}],"code":"# Install librosa if not already installed\n#!pip install librosa\n\nimport librosa\nimport numpy as np\nfrom fastdtw import fastdtw  # FastDTW is a faster implementation of DTW\n\n# Load your two audio files\naudio_file_1 = audio_filename1\naudio_file_2 = audio_filename2\n\n# Load audio files with librosa\ny1, sr1 = librosa.load(audio_file_1, sr=None)\ny2, sr2 = librosa.load(audio_file_2, sr=None)\nprint(y1)\nprint(sr1)\n# Make sure the audio files have the same length (adjust if needed)\nmin_length = min(len(y1), len(y2))\ny1 = y1[:min_length]\ny2 = y2[:min_length]\n\n# Compute MFCC features\nmfccs_1 = librosa.feature.mfcc(y=y1, sr=sr1, n_mfcc=13)\nmfccs_2 = librosa.feature.mfcc(y=y2, sr=sr2, n_mfcc=13)\n\n# Convert the path to a numpy array\npath_array = np.array(path)\n\n# Transpose the features to align them properly\nfeature_1 = mfccs_1.T\nfeature_2 = mfccs_2.T\n\n'''\n# Extract features (you might need to adjust this based on your specific needs)\nfeature_1 = librosa.feature.mfcc(y1, sr=sr1)\nfeature_2 = librosa.feature.mfcc(y2, sr=sr2)\n\n# Transpose the features to align them properly\nfeature_1 = feature_1.T\nfeature_2 = feature_2.T\n'''\n\n# Calculate DTW distance using fastdtw\ndistance, path = fastdtw(feature_1, feature_2)\n\n# Print the DTW distance\nprint(f'DTW Distance: {distance}')\n\n\n# Create a matrix of zeros\nalignment_matrix = np.zeros((len(feature_1), len(feature_2)))\n\n# Set the aligned indices to 1\nfor i, j in path:\n    alignment_matrix[i, j] = 1\n\n# Visualize the alignment matrix\nplt.imshow(alignment_matrix, origin='lower', cmap='gray', interpolation='nearest')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('Alignment Matrix')\nplt.show()\n\n'''\n# Visualize the alignment path if needed\nimport matplotlib.pyplot as plt\n\nplt.imshow(np.log(path.T), origin='lower', cmap='gray', interpolation='nearest')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.title('DTW Path')\nplt.show()\n'''\n","cell_id":"d4b95667-7c56-4cae-9310-e5eeb415fd98","dependencies":["audio_filename1","audio_filename2","print","min","len","path","plt"],"imports":["librosa","np","fastdtw"],"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/ipykernel_32856/3213083228.py\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlibrosa\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mfastdtw\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfastdtw\u001b[0m  \u001b[0;31m# FastDTW is a faster implementation of DTW\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Load your two audio files\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'fastdtw'"],"ename":"ModuleNotFoundError","evalue":"No module named 'fastdtw'","output_type":"error"}],"definitions":["audio_file_1","audio_file_2","y1","sr1","y2","sr2","min_length","mfccs_1","mfccs_2","path_array","feature_1","feature_2","distance","path","alignment_matrix","i","j"],"definition_info":{"audio_file_1":"","audio_file_2":"","y1":"","sr1":"","y2":"","sr2":"","min_length":"","mfccs_1":"","mfccs_2":"","path_array":"","feature_1":"","feature_2":"","distance":"","path":"","alignment_matrix":"","i":"","j":""},"time":"Wed, 10 Jul 2024 16:01:59 GMT"},{"execution_count":10,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install librosa pretty_midi mir_eval hmmlearn fastdtw\n\n# Install pyfluidsynth and fluidsynth\n!pip install fluidsynth pyfluidsynth\n!apt-get install -y fluidsynth\n","cell_id":"fa1f14c1-8111-4420-806b-19807773147b","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Requirement already satisfied: librosa in ./prov-env/lib/python3.9/site-packages (0.10.2.post1)\nRequirement already satisfied: pretty_midi in ./prov-env/lib/python3.9/site-packages (0.2.10)\nCollecting mir_eval\n  Downloading mir_eval-0.7.tar.gz (90 kB)\n\u001b[K     |████████████████████████████████| 90 kB 6.4 MB/s eta 0:00:011\n\u001b[?25hCollecting hmmlearn\n  Downloading hmmlearn-0.3.2-cp39-cp39-macosx_10_9_universal2.whl (192 kB)\n\u001b[K     |████████████████████████████████| 192 kB 5.5 MB/s eta 0:00:01\n\u001b[?25hCollecting fastdtw\n  Downloading fastdtw-0.3.4.tar.gz (133 kB)\n\u001b[K     |████████████████████████████████| 133 kB 3.7 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: pooch>=1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.8.2)\nRequirement already satisfied: audioread>=2.1.9 in ./prov-env/lib/python3.9/site-packages (from librosa) (3.0.1)\nRequirement already satisfied: lazy-loader>=0.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.4)\nRequirement already satisfied: scikit-learn>=0.20.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.5.1)\nRequirement already satisfied: soundfile>=0.12.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.12.1)\nRequirement already satisfied: scipy>=1.2.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.13.1)\nRequirement already satisfied: typing-extensions>=4.1.1 in ./prov-env/lib/python3.9/site-packages (from librosa) (4.12.2)\nRequirement already satisfied: msgpack>=1.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.0.8)\nRequirement already satisfied: decorator>=4.3.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (5.1.1)\nRequirement already satisfied: soxr>=0.3.2 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.3.7)\nRequirement already satisfied: numba>=0.51.0 in ./prov-env/lib/python3.9/site-packages (from librosa) (0.60.0)\nRequirement already satisfied: joblib>=0.14 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.4.2)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in ./prov-env/lib/python3.9/site-packages (from librosa) (1.26.4)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from lazy-loader>=0.1->librosa) (23.2)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in ./prov-env/lib/python3.9/site-packages (from numba>=0.51.0->librosa) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (4.2.2)\nRequirement already satisfied: requests>=2.19.0 in ./prov-env/lib/python3.9/site-packages (from pooch>=1.1->librosa) (2.31.0)\nRequirement already satisfied: idna<4,>=2.5 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.1)\nRequirement already satisfied: urllib3<3,>=1.21.1 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.2.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\nRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2020.12.5)\nRequirement already satisfied: threadpoolctl>=3.1.0 in ./prov-env/lib/python3.9/site-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in ./prov-env/lib/python3.9/site-packages (from soundfile>=0.12.1->librosa) (1.16.0)\nRequirement already satisfied: pycparser in ./prov-env/lib/python3.9/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\nRequirement already satisfied: mido>=1.1.16 in ./prov-env/lib/python3.9/site-packages (from pretty_midi) (1.3.2)\nRequirement already satisfied: six in ./prov-env/lib/python3.9/site-packages (from pretty_midi) (1.16.0)\nCollecting future\n  Downloading future-1.0.0-py3-none-any.whl (491 kB)\n\u001b[K     |████████████████████████████████| 491 kB 5.1 MB/s eta 0:00:01\n\u001b[?25hUsing legacy 'setup.py install' for mir-eval, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for fastdtw, since package 'wheel' is not installed.\nInstalling collected packages: future, mir-eval, hmmlearn, fastdtw\n    Running setup.py install for mir-eval ... \u001b[?25ldone\n\u001b[?25h    Running setup.py install for fastdtw ... \u001b[?25ldone\n\u001b[?25hSuccessfully installed fastdtw-0.3.4 future-1.0.0 hmmlearn-0.3.2 mir-eval-0.7\nCollecting fluidsynth\n  Downloading fluidsynth-0.2.tar.gz (3.7 kB)\nCollecting pyfluidsynth\n  Downloading pyFluidSynth-1.3.3.tar.gz (26 kB)\nRequirement already satisfied: numpy in ./prov-env/lib/python3.9/site-packages (from pyfluidsynth) (1.26.4)\nUsing legacy 'setup.py install' for fluidsynth, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for pyfluidsynth, since package 'wheel' is not installed.\nInstalling collected packages: pyfluidsynth, fluidsynth\n    Running setup.py install for pyfluidsynth ... \u001b[?25ldone\n\u001b[?25h    Running setup.py install for fluidsynth ... \u001b[?25ldone\n\u001b[?25hSuccessfully installed fluidsynth-0.2 pyfluidsynth-1.3.3\nzsh:1: command not found: apt-get\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:02:23 GMT"},{"execution_count":11,"used_data":[],"data_vars":[],"execution_info":[{"name":"uploaded1","type":"assign","dependencies":["files"],"lineno":4,"end_lineno":4,"col_offset":0,"end_col_offset":26},{"name":"path_to_audio_file","type":"assign","dependencies":["list","uploaded1"],"lineno":7,"end_lineno":7,"col_offset":0,"end_col_offset":46},{"name":"print","type":"call","dependencies":["path_to_audio_file"],"lineno":10,"end_lineno":10,"col_offset":0,"end_col_offset":45}],"code":"from google.colab import files\n\n# Prompt the user to upload an audio file\nuploaded1 = files.upload()\n\n# Get the file name\npath_to_audio_file = list(uploaded1.keys())[0]\n\n# Print the uploaded file name\nprint(f\"Uploaded file: {path_to_audio_file}\")\n","cell_id":"83c1a9c1-e959-4750-ac99-f38ffa6ad1e4","dependencies":["list","print"],"imports":["files"],"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/ipykernel_32856/429327686.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Prompt the user to upload an audio file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0muploaded1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'google'"],"ename":"ModuleNotFoundError","evalue":"No module named 'google'","output_type":"error"}],"definitions":["uploaded1","path_to_audio_file"],"definition_info":{"uploaded1":"","path_to_audio_file":""},"time":"Wed, 10 Jul 2024 16:04:26 GMT"},{"execution_count":12,"used_data":[],"data_vars":[],"execution_info":[],"code":"!pip install google-colab","cell_id":"6b8c1b89-0fab-4b09-a7ae-8b535de2e336","dependencies":[],"imports":[],"outputs":[{"name":"stdout","text":"Collecting google-colab\n  Downloading google-colab-1.0.0.tar.gz (72 kB)\n\u001b[K     |████████████████████████████████| 72 kB 3.8 MB/s eta 0:00:011\n\u001b[?25hCollecting google-auth~=1.4.0\n  Downloading google_auth-1.4.2-py2.py3-none-any.whl (64 kB)\n\u001b[K     |████████████████████████████████| 64 kB 6.2 MB/s eta 0:00:01\n\u001b[?25hCollecting ipykernel~=4.6.0\n  Downloading ipykernel-4.6.1-py3-none-any.whl (104 kB)\n\u001b[K     |████████████████████████████████| 104 kB 8.0 MB/s eta 0:00:01\n\u001b[?25hCollecting ipython~=5.5.0\n  Downloading ipython-5.5.0-py3-none-any.whl (758 kB)\n\u001b[K     |████████████████████████████████| 758 kB 4.7 MB/s eta 0:00:01\n\u001b[?25hCollecting notebook~=5.2.0\n  Downloading notebook-5.2.2-py2.py3-none-any.whl (8.0 MB)\n\u001b[K     |████████████████████████████████| 8.0 MB 3.9 MB/s eta 0:00:01     |████████████████████▋           | 5.2 MB 3.7 MB/s eta 0:00:01\n\u001b[?25hCollecting six~=1.12.0\n  Downloading six-1.12.0-py2.py3-none-any.whl (10 kB)\nCollecting pandas~=0.24.0\n  Downloading pandas-0.24.2.tar.gz (11.8 MB)\n\u001b[K     |████████████████████████████████| 11.8 MB 771 kB/s eta 0:00:01\n\u001b[?25hCollecting portpicker~=1.2.0\n  Downloading portpicker-1.2.0.tar.gz (17 kB)\nCollecting requests~=2.21.0\n  Downloading requests-2.21.0-py2.py3-none-any.whl (57 kB)\n\u001b[K     |████████████████████████████████| 57 kB 5.2 MB/s eta 0:00:01\n\u001b[?25hCollecting tornado~=4.5.0\n  Downloading tornado-4.5.3.tar.gz (484 kB)\n\u001b[K     |████████████████████████████████| 484 kB 4.1 MB/s eta 0:00:01\n\u001b[?25hCollecting rsa>=3.1.4\n  Using cached rsa-4.9-py3-none-any.whl (34 kB)\nCollecting pyasn1-modules>=0.2.1\n  Downloading pyasn1_modules-0.4.0-py3-none-any.whl (181 kB)\n\u001b[K     |████████████████████████████████| 181 kB 3.2 MB/s eta 0:00:01\n\u001b[?25hCollecting cachetools>=2.0.0\n  Downloading cachetools-5.3.3-py3-none-any.whl (9.3 kB)\nRequirement already satisfied: jupyter-client in ./prov-env/lib/python3.9/site-packages (from ipykernel~=4.6.0->google-colab) (7.4.9)\nRequirement already satisfied: traitlets>=4.1.0 in ./prov-env/lib/python3.9/site-packages (from ipykernel~=4.6.0->google-colab) (5.14.3)\nRequirement already satisfied: decorator in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (5.1.1)\nCollecting simplegeneric>0.8\n  Downloading simplegeneric-0.8.1.zip (12 kB)\nRequirement already satisfied: pygments in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (2.18.0)\nRequirement already satisfied: appnope in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (0.1.4)\nRequirement already satisfied: pickleshare in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (0.7.5)\nRequirement already satisfied: pexpect in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (4.9.0)\nRequirement already satisfied: setuptools>=18.5 in ./prov-env/lib/python3.9/site-packages (from ipython~=5.5.0->google-colab) (56.0.0)\nCollecting prompt-toolkit<2.0.0,>=1.0.4\n  Downloading prompt_toolkit-1.0.18-py3-none-any.whl (245 kB)\n\u001b[K     |████████████████████████████████| 245 kB 5.3 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: jupyter-core in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (5.7.2)\nRequirement already satisfied: nbconvert in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (7.16.4)\nRequirement already satisfied: terminado>=0.3.3 in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (0.18.1)\nRequirement already satisfied: ipython-genutils in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (0.2.0)\nRequirement already satisfied: jinja2 in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (3.1.4)\nRequirement already satisfied: nbformat in ./prov-env/lib/python3.9/site-packages (from notebook~=5.2.0->google-colab) (5.10.4)\nRequirement already satisfied: python-dateutil>=2.5.0 in ./prov-env/lib/python3.9/site-packages (from pandas~=0.24.0->google-colab) (2.8.2)\nRequirement already satisfied: pytz>=2011k in ./prov-env/lib/python3.9/site-packages (from pandas~=0.24.0->google-colab) (2021.1)\nRequirement already satisfied: numpy>=1.12.0 in ./prov-env/lib/python3.9/site-packages (from pandas~=0.24.0->google-colab) (1.26.4)\nRequirement already satisfied: wcwidth in ./prov-env/lib/python3.9/site-packages (from prompt-toolkit<2.0.0,>=1.0.4->ipython~=5.5.0->google-colab) (0.2.13)\nCollecting pyasn1<0.7.0,>=0.4.6\n  Downloading pyasn1-0.6.0-py2.py3-none-any.whl (85 kB)\n\u001b[K     |████████████████████████████████| 85 kB 3.5 MB/s eta 0:00:01\n\u001b[?25hCollecting idna<2.9,>=2.5\n  Downloading idna-2.8-py2.py3-none-any.whl (58 kB)\n\u001b[K     |████████████████████████████████| 58 kB 4.2 MB/s eta 0:00:01\n\u001b[?25hCollecting chardet<3.1.0,>=3.0.2\n  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)\n\u001b[K     |████████████████████████████████| 133 kB 4.4 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: certifi>=2017.4.17 in ./prov-env/lib/python3.9/site-packages (from requests~=2.21.0->google-colab) (2020.12.5)\nCollecting urllib3<1.25,>=1.21.1\n  Downloading urllib3-1.24.3-py2.py3-none-any.whl (118 kB)\n\u001b[K     |████████████████████████████████| 118 kB 4.4 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: ptyprocess in ./prov-env/lib/python3.9/site-packages (from terminado>=0.3.3->notebook~=5.2.0->google-colab) (0.7.0)\nCollecting terminado>=0.3.3\n  Downloading terminado-0.18.0-py3-none-any.whl (14 kB)\n  Using cached terminado-0.17.1-py3-none-any.whl (17 kB)\n  Downloading terminado-0.17.0-py3-none-any.whl (16 kB)\n  Downloading terminado-0.16.0-py3-none-any.whl (16 kB)\n  Downloading terminado-0.15.0-py3-none-any.whl (16 kB)\n  Downloading terminado-0.13.3-py3-none-any.whl (14 kB)\nRequirement already satisfied: MarkupSafe>=2.0 in ./prov-env/lib/python3.9/site-packages (from jinja2->notebook~=5.2.0->google-colab) (2.1.5)\nRequirement already satisfied: pyzmq>=23.0 in ./prov-env/lib/python3.9/site-packages (from jupyter-client->ipykernel~=4.6.0->google-colab) (26.0.3)\nRequirement already satisfied: nest-asyncio>=1.5.4 in ./prov-env/lib/python3.9/site-packages (from jupyter-client->ipykernel~=4.6.0->google-colab) (1.6.0)\nRequirement already satisfied: entrypoints in ./prov-env/lib/python3.9/site-packages (from jupyter-client->ipykernel~=4.6.0->google-colab) (0.4)\nCollecting jupyter-client\n  Using cached jupyter_client-8.6.2-py3-none-any.whl (105 kB)\nRequirement already satisfied: importlib-metadata>=4.8.3 in ./prov-env/lib/python3.9/site-packages (from jupyter-client->ipykernel~=4.6.0->google-colab) (7.1.0)\n  Downloading jupyter_client-8.6.1-py3-none-any.whl (105 kB)\n\u001b[K     |████████████████████████████████| 105 kB 3.9 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.6.0-py3-none-any.whl (105 kB)\n\u001b[K     |████████████████████████████████| 105 kB 4.2 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.4.0-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 5.1 MB/s eta 0:00:01\n\u001b[?25h  Using cached jupyter_client-8.3.1-py3-none-any.whl (104 kB)\n  Downloading jupyter_client-8.3.0-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 5.1 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.2.0-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 5.3 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.1.0-py3-none-any.whl (102 kB)\n\u001b[K     |████████████████████████████████| 102 kB 4.6 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.0.3-py3-none-any.whl (102 kB)\n\u001b[K     |████████████████████████████████| 102 kB 2.2 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.0.2-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 4.6 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.0.1-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 4.5 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-8.0.0-py3-none-any.whl (103 kB)\n\u001b[K     |████████████████████████████████| 103 kB 4.7 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.8-py3-none-any.whl (133 kB)\n\u001b[K     |████████████████████████████████| 133 kB 5.0 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.7-py3-none-any.whl (133 kB)\n\u001b[K     |████████████████████████████████| 133 kB 4.6 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.6-py3-none-any.whl (133 kB)\n\u001b[K     |████████████████████████████████| 133 kB 4.0 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.5-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 1.3 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.4-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.8 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.3-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 4.7 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.2-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.7 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.1-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.4 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.4.0-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.3 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.5-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.6 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.4-py3-none-any.whl (132 kB)\n\u001b[K     |████████████████████████████████| 132 kB 3.6 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.3-py3-none-any.whl (131 kB)\n\u001b[K     |████████████████████████████████| 131 kB 3.7 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.2-py3-none-any.whl (131 kB)\n\u001b[K     |████████████████████████████████| 131 kB 3.4 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.1-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 2.9 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.3.0-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 3.5 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.2.2-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 4.1 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.2.1-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 4.9 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.2.0-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 3.8 MB/s eta 0:00:01\n\u001b[?25h  Downloading jupyter_client-7.1.2-py3-none-any.whl (130 kB)\n\u001b[K     |████████████████████████████████| 130 kB 2.6 MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied: platformdirs>=2.5 in ./prov-env/lib/python3.9/site-packages (from jupyter-core->notebook~=5.2.0->google-colab) (4.2.2)\nRequirement already satisfied: defusedxml in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (0.7.1)\nRequirement already satisfied: mistune<4,>=2.0.3 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (3.0.2)\nRequirement already satisfied: pandocfilters>=1.4.1 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (1.5.1)\nRequirement already satisfied: packaging in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (23.2)\nRequirement already satisfied: tinycss2 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (1.3.0)\nRequirement already satisfied: nbclient>=0.5.0 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (0.10.0)\nRequirement already satisfied: jupyterlab-pygments in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (0.3.0)\nRequirement already satisfied: bleach!=5.0.0 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (6.1.0)\nRequirement already satisfied: beautifulsoup4 in ./prov-env/lib/python3.9/site-packages (from nbconvert->notebook~=5.2.0->google-colab) (4.12.3)\nRequirement already satisfied: webencodings in ./prov-env/lib/python3.9/site-packages (from bleach!=5.0.0->nbconvert->notebook~=5.2.0->google-colab) (0.5.1)\nRequirement already satisfied: zipp>=0.5 in ./prov-env/lib/python3.9/site-packages (from importlib-metadata>=4.8.3->jupyter-client->ipykernel~=4.6.0->google-colab) (3.19.2)\nRequirement already satisfied: fastjsonschema>=2.15 in ./prov-env/lib/python3.9/site-packages (from nbformat->notebook~=5.2.0->google-colab) (2.20.0)\nRequirement already satisfied: jsonschema>=2.6 in ./prov-env/lib/python3.9/site-packages (from nbformat->notebook~=5.2.0->google-colab) (4.22.0)\nRequirement already satisfied: attrs>=22.2.0 in ./prov-env/lib/python3.9/site-packages (from jsonschema>=2.6->nbformat->notebook~=5.2.0->google-colab) (23.2.0)\nRequirement already satisfied: jsonschema-specifications>=2023.03.6 in ./prov-env/lib/python3.9/site-packages (from jsonschema>=2.6->nbformat->notebook~=5.2.0->google-colab) (2023.12.1)\nRequirement already satisfied: rpds-py>=0.7.1 in ./prov-env/lib/python3.9/site-packages (from jsonschema>=2.6->nbformat->notebook~=5.2.0->google-colab) (0.18.1)\nRequirement already satisfied: referencing>=0.28.4 in ./prov-env/lib/python3.9/site-packages (from jsonschema>=2.6->nbformat->notebook~=5.2.0->google-colab) (0.35.1)\nRequirement already satisfied: soupsieve>1.2 in ./prov-env/lib/python3.9/site-packages (from beautifulsoup4->nbconvert->notebook~=5.2.0->google-colab) (2.5)\nUsing legacy 'setup.py install' for google-colab, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for pandas, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for portpicker, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for simplegeneric, since package 'wheel' is not installed.\nUsing legacy 'setup.py install' for tornado, since package 'wheel' is not installed.\nInstalling collected packages: six, tornado, simplegeneric, prompt-toolkit, jupyter-client, pyasn1, ipython, urllib3, terminado, rsa, pyasn1-modules, ipykernel, idna, chardet, cachetools, requests, portpicker, pandas, notebook, google-auth, google-colab\n  Attempting uninstall: six\n    Found existing installation: six 1.16.0\n    Uninstalling six-1.16.0:\n      Successfully uninstalled six-1.16.0\n  Attempting uninstall: tornado\n    Found existing installation: tornado 6.4.1\n    Uninstalling tornado-6.4.1:\n      Successfully uninstalled tornado-6.4.1\n    Running setup.py install for tornado ... \u001b[?25ldone\n\u001b[?25h    Running setup.py install for simplegeneric ... \u001b[?25ldone\n\u001b[?25h  Attempting uninstall: prompt-toolkit\n    Found existing installation: prompt-toolkit 3.0.47\n    Uninstalling prompt-toolkit-3.0.47:\n      Successfully uninstalled prompt-toolkit-3.0.47\n  Attempting uninstall: jupyter-client\n    Found existing installation: jupyter-client 7.4.9\n    Uninstalling jupyter-client-7.4.9:\n      Successfully uninstalled jupyter-client-7.4.9\n  Attempting uninstall: ipython\n    Found existing installation: ipython 7.34.0\n    Uninstalling ipython-7.34.0:\n      Successfully uninstalled ipython-7.34.0\n  Attempting uninstall: urllib3\n    Found existing installation: urllib3 2.2.2\n    Uninstalling urllib3-2.2.2:\n      Successfully uninstalled urllib3-2.2.2\n  Attempting uninstall: terminado\n    Found existing installation: terminado 0.18.1\n    Uninstalling terminado-0.18.1:\n      Successfully uninstalled terminado-0.18.1\n  Attempting uninstall: ipykernel\n    Found existing installation: ipykernel 6.29.4\n    Uninstalling ipykernel-6.29.4:\n      Successfully uninstalled ipykernel-6.29.4\n  Attempting uninstall: idna\n    Found existing installation: idna 3.1\n    Uninstalling idna-3.1:\n      Successfully uninstalled idna-3.1\n  Attempting uninstall: chardet\n    Found existing installation: chardet 4.0.0\n    Uninstalling chardet-4.0.0:\n      Successfully uninstalled chardet-4.0.0\n  Attempting uninstall: requests\n    Found existing installation: requests 2.31.0\n    Uninstalling requests-2.31.0:\n      Successfully uninstalled requests-2.31.0\n    Running setup.py install for portpicker ... \u001b[?25ldone\n\u001b[?25h  Attempting uninstall: pandas\n    Found existing installation: pandas 2.2.2\n    Uninstalling pandas-2.2.2:\n      Successfully uninstalled pandas-2.2.2\n    Running setup.py install for pandas ... \u001b[?25lerror\n\u001b[31m    ERROR: Command errored out with exit status 1:\n     command: /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/bin/python3 -u -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-install-hobte39h/pandas_a84c1d312d2f43ed8ee1c221c5a2d60d/setup.py'\"'\"'; __file__='\"'\"'/private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-install-hobte39h/pandas_a84c1d312d2f43ed8ee1c221c5a2d60d/setup.py'\"'\"';f = getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__) if os.path.exists(__file__) else io.StringIO('\"'\"'from setuptools import setup; setup()'\"'\"');code = f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-record-r74ortup/install-record.txt --single-version-externally-managed --compile --install-headers /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/include/site/python3.9/pandas\n         cwd: /private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-install-hobte39h/pandas_a84c1d312d2f43ed8ee1c221c5a2d60d/\n    Complete output (1045 lines):\n    running install\n    running build\n    running build_py\n    creating build\n    creating build/lib.macosx-14.2-arm64-3.9\n    creating build/lib.macosx-14.2-arm64-3.9/pandas\n    copying pandas/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas\n    copying pandas/_version.py -> build/lib.macosx-14.2-arm64-3.9/pandas\n    copying pandas/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas\n    copying pandas/testing.py -> build/lib.macosx-14.2-arm64-3.9/pandas\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/compat\n    copying pandas/compat/chainmap_impl.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat\n    copying pandas/compat/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat\n    copying pandas/compat/chainmap.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat\n    copying pandas/compat/pickle_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/accessor.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/nanops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/algorithms.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/config.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/resample.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/window.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/index.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/config_init.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/generic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/series.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/frame.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/panel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/strings.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    copying pandas/core/apply.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_depr_module.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_test_decorators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_validators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_print_versions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_decorators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_doctools.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/testing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_exceptions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    copying pandas/util/_tester.py -> build/lib.macosx-14.2-arm64-3.9/pandas/util\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/feather_format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/parquet.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/gcs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/pytables.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/html.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/clipboards.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/parsers.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/excel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/date_converters.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/pickle.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/sql.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/s3.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/packers.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/stata.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    copying pandas/io/gbq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/plotting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/converter.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/offsets.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/frequencies.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    copying pandas/tseries/holiday.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tseries\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_expressions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_register_accessor.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_downstream.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_errors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_join.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_panel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_lib.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_nanops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_take.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_algos.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_multilevel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_config.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_window.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_strings.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    copying pandas/tests/test_base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/_libs\n    copying pandas/_libs/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/_libs\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_converter.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_tools.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_style.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_core.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_timeseries.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    copying pandas/plotting/_misc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/plotting\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/arrays\n    copying pandas/arrays/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/arrays\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/api\n    copying pandas/api/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/api\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/errors\n    copying pandas/errors/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/errors\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/compat/numpy\n    copying pandas/compat/numpy/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat/numpy\n    copying pandas/compat/numpy/function.py -> build/lib.macosx-14.2-arm64-3.9/pandas/compat/numpy\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/tile.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/merge.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/util.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/reshape.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/melt.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    copying pandas/core/reshape/pivot.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/reshape\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/tools\n    copying pandas/core/tools/timedeltas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/tools\n    copying pandas/core/tools/datetimes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/tools\n    copying pandas/core/tools/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/tools\n    copying pandas/core/tools/numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/tools\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/util\n    copying pandas/core/util/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/util\n    copying pandas/core/util/hashing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/util\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/cast.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/generic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/inference.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    copying pandas/core/dtypes/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/dtypes\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/generic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/grouper.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    copying pandas/core/groupby/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/groupby\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/arrays.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/blocks.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    copying pandas/core/internals/managers.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/internals\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/check.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/align.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/pytables.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/engines.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/expressions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/eval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/scope.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    copying pandas/core/computation/expr.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/computation\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/timedeltas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/datetimes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/numpy_.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/_ranges.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/integer.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/sparse.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/array_.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    copying pandas/core/arrays/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/arrays\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    copying pandas/core/sparse/scipy_sparse.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    copying pandas/core/sparse/series.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    copying pandas/core/sparse/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    copying pandas/core/sparse/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    copying pandas/core/sparse/frame.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/sparse\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/accessors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/timedeltas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/datetimes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/multi.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/frozen.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    copying pandas/core/indexes/category.py -> build/lib.macosx-14.2-arm64-3.9/pandas/core/indexes\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/msgpack\n    copying pandas/io/msgpack/_version.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/msgpack\n    copying pandas/io/msgpack/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/msgpack\n    copying pandas/io/msgpack/exceptions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/msgpack\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/console.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/style.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/terminal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/html.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/excel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/css.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/csvs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/latex.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    copying pandas/io/formats/printing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/json\n    copying pandas/io/json/normalize.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/json\n    copying pandas/io/json/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/json\n    copying pandas/io/json/table_schema.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/json\n    copying pandas/io/json/json.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/json\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    copying pandas/io/sas/sas7bdat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    copying pandas/io/sas/sas_constants.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    copying pandas/io/sas/sasreader.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    copying pandas/io/sas/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    copying pandas/io/sas/sas_xport.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/sas\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/clipboard\n    copying pandas/io/clipboard/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/clipboard\n    copying pandas/io/clipboard/clipboards.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/clipboard\n    copying pandas/io/clipboard/exceptions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/clipboard\n    copying pandas/io/clipboard/windows.py -> build/lib.macosx-14.2-arm64-3.9/pandas/io/clipboard\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_block_internals.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_alter_axes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_timeseries.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_constructors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_timezones.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_operators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_subclass.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_analytics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_io.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_apply.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_quantile.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_datetime_values.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_internals.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_repr.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_validate.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_duplicates.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_asof.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_rank.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_replace.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_combine_concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    copying pandas/tests/series/test_dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_cut.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_union_categoricals.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_qcut.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_pivot.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_reshape.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_util.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_melt.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    copying pandas/tests/reshape/test_concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/tools\n    copying pandas/tests/tools/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tools\n    copying pandas/tests/tools/test_numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tools\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_external_block.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_sparse.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    copying pandas/tests/extension/test_integer.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_resampler_grouper.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_timedelta.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_period_index.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_datetime_index.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_time_grouper.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    copying pandas/tests/resample/test_resample_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/resample\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_validate_args_and_kwargs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_series_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_safe_import.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_locale.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_frame_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_interval_array_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_util.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_move.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_index_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_validate_args.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_validate_kwargs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_categorical_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_numpy_array_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_extension_array_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_deprecate.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_hashing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_deprecate_kwarg.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    copying pandas/tests/util/test_assert_almost_equal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/util\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_parquet.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_compression.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_date_converters.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_pickle.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_clipboard.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_stata.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_html.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_pytables.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_gcs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_sql.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_gbq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_feather.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/generate_legacy_storage_files.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_excel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_s3.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    copying pandas/tests/io/test_packers.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries\n    copying pandas/tests/tseries/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries\n    copying pandas/tests/tseries/test_frequencies.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries\n    copying pandas/tests/tseries/test_holiday.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_block_internals.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_alter_axes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_axis_select_reindex.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_convert_to.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_timeseries.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_constructors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_mutate_columns.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_query_eval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_join.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_timezones.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_sort_values_level_as_str.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_operators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_subclass.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_reshape.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_analytics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_apply.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_quantile.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_repr_info.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_nonunique_indexes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_validate.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_duplicates.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_asof.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_rank.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_replace.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_combine_concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    copying pandas/tests/frame/test_to_csv.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/frame\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_inference.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_generic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    copying pandas/tests/dtypes/test_dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_timegrouper.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_grouping.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_counting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_value_counts.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_transform.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_nth.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_bin_groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_apply.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_function.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_filters.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_rank.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_index_as_string.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    copying pandas/tests/groupby/test_whitelist.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/internals\n    copying pandas/tests/internals/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/internals\n    copying pandas/tests/internals/test_internals.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/internals\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/computation\n    copying pandas/tests/computation/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/computation\n    copying pandas/tests/computation/test_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/computation\n    copying pandas/tests/computation/test_eval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/computation\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_frame.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_misc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_boxplot_method.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_hist_method.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_converter.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    copying pandas/tests/plotting/test_series.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/plotting\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_array.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_timedeltas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_integer.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_datetimes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    copying pandas/tests/arrays/test_numpy.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/test_datetime64.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/test_timedelta64.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/test_numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    copying pandas/tests/arithmetic/test_object.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arithmetic\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/api\n    copying pandas/tests/api/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/api\n    copying pandas/tests/api/test_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/api\n    copying pandas/tests/api/test_types.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/api\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/test_frame.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/test_panel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/test_generic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/test_label_or_level_utils.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    copying pandas/tests/generic/test_series.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/generic\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_parsing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_ccalendar.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_timezones.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_conversion.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_array_to_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_timedeltas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_liboffsets.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_libfrequencies.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_parse_iso8601.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_normalize_date.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    copying pandas/tests/tslibs/test_period_asfreq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tslibs\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_pivot.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_reshape.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_combine_concat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    copying pandas/tests/sparse/test_format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_indexing_slow.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_ix.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_chaining_and_caching.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_callable.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_panel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_categorical.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_iloc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_loc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_timedelta.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_floats.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_coercion.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_scalar.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_partial.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    copying pandas/tests/indexing/test_indexing_engines.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/reductions\n    copying pandas/tests/reductions/test_stat_reductions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reductions\n    copying pandas/tests/reductions/test_reductions.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reductions\n    copying pandas/tests/reductions/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reductions\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar\n    copying pandas/tests/scalar/test_nat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar\n    copying pandas/tests/scalar/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_frozen.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_category.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    copying pandas/tests/indexes/test_base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_alter_index.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_callable.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_boolean.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_iloc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_loc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_numeric.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    copying pandas/tests/series/indexing/test_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/series/indexing\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_merge_index_as_string.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_merge_asof.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_join.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_merge.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_multi.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    copying pandas/tests/reshape/merge/test_merge_ordered.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/reshape/merge\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/decimal\n    copying pandas/tests/extension/decimal/test_decimal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/decimal\n    copying pandas/tests/extension/decimal/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/decimal\n    copying pandas/tests/extension/decimal/array.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/decimal\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/arrow\n    copying pandas/tests/extension/arrow/bool.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/arrow\n    copying pandas/tests/extension/arrow/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/arrow\n    copying pandas/tests/extension/arrow/test_bool.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/arrow\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/json\n    copying pandas/tests/extension/json/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/json\n    copying pandas/tests/extension/json/test_json.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/json\n    copying pandas/tests/extension/json/array.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/json\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/reshaping.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/methods.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/reduce.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/setitem.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/dtype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/io.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/interface.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/getitem.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/casting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/groupby.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/base.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/constructors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    copying pandas/tests/extension/base/printing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/base\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/numpy_\n    copying pandas/tests/extension/numpy_/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/numpy_\n    copying pandas/tests/extension/numpy_/test_numpy_nested.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/numpy_\n    copying pandas/tests/extension/numpy_/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/numpy_\n    copying pandas/tests/extension/numpy_/test_numpy.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/extension/numpy_\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_extension.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_subtype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_buffer.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_unpack.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_pack.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_unpack_raw.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_except.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_case.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_read_size.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_seq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_limits.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_obj.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_newspec.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    copying pandas/tests/io/msgpack/test_sequnpack.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/msgpack\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_console.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_to_latex.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_to_html.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_eng_formatting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_printing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_style.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_css.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_to_excel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    copying pandas/tests/io/formats/test_to_csv.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/formats\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_comment.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_multi_thread.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_compression.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_converters.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_parse_dates.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_c_parser_only.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_dialect.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_skiprows.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_read_fwf.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_unsupported.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_mangle_dupes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_python_parser_only.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_textreader.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_network.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_na_values.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_usecols.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_quoting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_header.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_index_col.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    copying pandas/tests/io/parser/test_dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/parser\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_compression.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_json_table_schema.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_readlines.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_ujson.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_pandas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    copying pandas/tests/io/json/test_normalize.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/json\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/sas\n    copying pandas/tests/io/sas/test_sas7bdat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/sas\n    copying pandas/tests/io/sas/test_sas.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/sas\n    copying pandas/tests/io/sas/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/sas\n    copying pandas/tests/io/sas/test_xport.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/io/sas\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/test_offsets_properties.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/test_fiscal.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/test_yqm_offsets.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/test_ticks.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    copying pandas/tests/tseries/offsets/test_offsets.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/tseries/offsets\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_convert_objects.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_construct_object_arr.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_construct_from_scalar.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_find_common_type.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_infer_dtype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_infer_datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_construct_ndarray.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    copying pandas/tests/dtypes/cast/test_downcast.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/dtypes/cast\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby/aggregate\n    copying pandas/tests/groupby/aggregate/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby/aggregate\n    copying pandas/tests/groupby/aggregate/test_cython.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby/aggregate\n    copying pandas/tests/groupby/aggregate/test_aggregate.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby/aggregate\n    copying pandas/tests/groupby/aggregate/test_other.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/groupby/aggregate\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/interval\n    copying pandas/tests/arrays/interval/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/interval\n    copying pandas/tests/arrays/interval/test_interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/interval\n    copying pandas/tests/arrays/interval/test_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/interval\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_warnings.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_constructors.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_operators.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_subclass.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_analytics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_algos.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/common.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_repr.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_api.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    copying pandas/tests/arrays/categorical/test_dtypes.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/categorical\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    copying pandas/tests/arrays/sparse/test_libsparse.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    copying pandas/tests/arrays/sparse/test_array.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    copying pandas/tests/arrays/sparse/test_arithmetics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    copying pandas/tests/arrays/sparse/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    copying pandas/tests/arrays/sparse/test_dtype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/arrays/sparse\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/series\n    copying pandas/tests/sparse/series/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/series\n    copying pandas/tests/sparse/series/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/series\n    copying pandas/tests/sparse/series/test_series.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/series\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_frame.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_to_from_scipy.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_analytics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_apply.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    copying pandas/tests/sparse/frame/test_to_csv.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/sparse/frame\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/interval\n    copying pandas/tests/indexing/interval/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/interval\n    copying pandas/tests/indexing/interval/test_interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/interval\n    copying pandas/tests/indexing/interval/test_interval_new.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/interval\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_indexing_slow.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_multiindex.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_ix.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_chaining_and_caching.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_xs.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_getitem.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_panel.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_sorted.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_setitem.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_iloc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_loc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_slice.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_set_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    copying pandas/tests/indexing/multiindex/test_partial.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexing/multiindex\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/interval\n    copying pandas/tests/scalar/interval/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/interval\n    copying pandas/tests/scalar/interval/test_interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/interval\n    copying pandas/tests/scalar/interval/test_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/interval\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    copying pandas/tests/scalar/timedelta/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    copying pandas/tests/scalar/timedelta/test_timedelta.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    copying pandas/tests/scalar/timedelta/test_formats.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    copying pandas/tests/scalar/timedelta/test_construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    copying pandas/tests/scalar/timedelta/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timedelta\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/period\n    copying pandas/tests/scalar/period/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/period\n    copying pandas/tests/scalar/period/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/period\n    copying pandas/tests/scalar/period/test_asfreq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/period\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_timezones.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_timestamp.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_comparisons.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_rendering.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_unary_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    copying pandas/tests/scalar/timestamp/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/scalar/timestamp\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_interval_range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_interval.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_astype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_interval_new.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    copying pandas/tests/indexes/interval/test_interval_tree.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/interval\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_names.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/conftest.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_sorting.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_join.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_copy.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_integrity.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_reshape.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_analytics.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_constructor.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_conversion.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_astype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_equivalence.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_get_set.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_monotonic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_drop.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_duplicates.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_set_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_contains.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_partial_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_format.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    copying pandas/tests/indexes/multi/test_reindex.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/multi\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_period.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_scalar_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_astype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_formats.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_setops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_partial_slicing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_tools.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_asfreq.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    copying pandas/tests/indexes/period/test_period_range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/period\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_misc.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_missing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_date_range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_timezones.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_datetimelike.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_scalar_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_astype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_formats.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_setops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_datetime.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_partial_slicing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    copying pandas/tests/indexes/datetimes/test_tools.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/datetimes\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_timedelta.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_scalar_compat.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_indexing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_astype.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_formats.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_setops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_construction.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_partial_slicing.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_ops.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_arithmetic.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_timedelta_range.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    copying pandas/tests/indexes/timedeltas/test_tools.py -> build/lib.macosx-14.2-arm64-3.9/pandas/tests/indexes/timedeltas\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/_libs/tslibs\n    copying pandas/_libs/tslibs/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/_libs/tslibs\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/api/types\n    copying pandas/api/types/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/api/types\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/api/extensions\n    copying pandas/api/extensions/__init__.py -> build/lib.macosx-14.2-arm64-3.9/pandas/api/extensions\n    creating build/lib.macosx-14.2-arm64-3.9/pandas/io/formats/templates\n    copying pandas/io/formats/templates/html.tpl -> build/lib.macosx-14.2-arm64-3.9/pandas/io/formats/templates\n    UPDATING build/lib.macosx-14.2-arm64-3.9/pandas/_version.py\n    set build/lib.macosx-14.2-arm64-3.9/pandas/_version.py to '0.24.2'\n    running build_ext\n    building 'pandas._libs.algos' extension\n    creating build/temp.macosx-14.2-arm64-3.9\n    creating build/temp.macosx-14.2-arm64-3.9/pandas\n    creating build/temp.macosx-14.2-arm64-3.9/pandas/_libs\n    clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -DOPENSSL_NO_SSL3 -Ipandas/_libs/src/klib -Ipandas/_libs/src -I/Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/numpy/core/include -I/Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/include -I/Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9 -c pandas/_libs/algos.c -o build/temp.macosx-14.2-arm64-3.9/pandas/_libs/algos.o -Wno-unused-function\n    In file included from pandas/_libs/algos.c:637:\n    In file included from /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/numpy/core/include/numpy/arrayobject.h:5:\n    In file included from /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/numpy/core/include/numpy/ndarrayobject.h:12:\n    In file included from /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/numpy/core/include/numpy/ndarraytypes.h:1929:\n    /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:17:2: warning: \"Using deprecated NumPy API, disable it with \"          \"#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-W#warnings]\n    #warning \"Using deprecated NumPy API, disable it with \" \\\n     ^\n    pandas/_libs/algos.c:158842:71: error: no member named 'tp_print' in 'struct _typeobject'\n      __pyx_scope_struct____Pyx_CFunc_object____ndarray____object___to_py.tp_print = 0;\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n    pandas/_libs/algos.c:158850:26: error: no member named 'tp_print' in 'struct _typeobject'\n      __pyx_type___pyx_array.tp_print = 0;\n      ~~~~~~~~~~~~~~~~~~~~~~ ^\n    pandas/_libs/algos.c:158855:32: error: no member named 'tp_print' in 'struct _typeobject'\n      __pyx_type___pyx_MemviewEnum.tp_print = 0;\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n    pandas/_libs/algos.c:158870:31: error: no member named 'tp_print' in 'struct _typeobject'\n      __pyx_type___pyx_memoryview.tp_print = 0;\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n    pandas/_libs/algos.c:158883:36: error: no member named 'tp_print' in 'struct _typeobject'\n      __pyx_type___pyx_memoryviewslice.tp_print = 0;\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n    pandas/_libs/algos.c:164747:22: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                         ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:261:7: note: expanded from macro 'PyUnicode_GET_SIZE'\n          PyUnicode_WSTR_LENGTH(op) :                    \\\n          ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164747:22: warning: 'PyUnicode_AsUnicode' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                         ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:262:14: note: expanded from macro 'PyUnicode_GET_SIZE'\n          ((void)PyUnicode_AsUnicode(_PyObject_CAST(op)),\\\n                 ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:580:1: note: 'PyUnicode_AsUnicode' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3) PyAPI_FUNC(Py_UNICODE *) PyUnicode_AsUnicode(\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164747:22: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                         ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:264:8: note: expanded from macro 'PyUnicode_GET_SIZE'\n           PyUnicode_WSTR_LENGTH(op)))\n           ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164747:52: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                       ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:261:7: note: expanded from macro 'PyUnicode_GET_SIZE'\n          PyUnicode_WSTR_LENGTH(op) :                    \\\n          ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164747:52: warning: 'PyUnicode_AsUnicode' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                       ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:262:14: note: expanded from macro 'PyUnicode_GET_SIZE'\n          ((void)PyUnicode_AsUnicode(_PyObject_CAST(op)),\\\n                 ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:580:1: note: 'PyUnicode_AsUnicode' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3) PyAPI_FUNC(Py_UNICODE *) PyUnicode_AsUnicode(\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164747:52: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                        (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                       ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:264:8: note: expanded from macro 'PyUnicode_GET_SIZE'\n           PyUnicode_WSTR_LENGTH(op)))\n           ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:26: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                             ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:261:7: note: expanded from macro 'PyUnicode_GET_SIZE'\n          PyUnicode_WSTR_LENGTH(op) :                    \\\n          ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:26: warning: 'PyUnicode_AsUnicode' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                             ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:262:14: note: expanded from macro 'PyUnicode_GET_SIZE'\n          ((void)PyUnicode_AsUnicode(_PyObject_CAST(op)),\\\n                 ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:580:1: note: 'PyUnicode_AsUnicode' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3) PyAPI_FUNC(Py_UNICODE *) PyUnicode_AsUnicode(\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:26: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                             ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:264:8: note: expanded from macro 'PyUnicode_GET_SIZE'\n           PyUnicode_WSTR_LENGTH(op)))\n           ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:59: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                              ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:261:7: note: expanded from macro 'PyUnicode_GET_SIZE'\n          PyUnicode_WSTR_LENGTH(op) :                    \\\n          ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:59: warning: 'PyUnicode_AsUnicode' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                              ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:262:14: note: expanded from macro 'PyUnicode_GET_SIZE'\n          ((void)PyUnicode_AsUnicode(_PyObject_CAST(op)),\\\n                 ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:580:1: note: 'PyUnicode_AsUnicode' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3) PyAPI_FUNC(Py_UNICODE *) PyUnicode_AsUnicode(\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:164763:59: warning: '_PyUnicode_get_wstr_length' is deprecated [-Wdeprecated-declarations]\n                            (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :\n                                                              ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:264:8: note: expanded from macro 'PyUnicode_GET_SIZE'\n           PyUnicode_WSTR_LENGTH(op)))\n           ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:451:35: note: expanded from macro 'PyUnicode_WSTR_LENGTH'\n    #define PyUnicode_WSTR_LENGTH(op) _PyUnicode_get_wstr_length((PyObject*)op)\n                                      ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:445:1: note: '_PyUnicode_get_wstr_length' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3)\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    pandas/_libs/algos.c:167625:16: warning: 'PyUnicode_FromUnicode' is deprecated [-Wdeprecated-declarations]\n            return PyUnicode_FromUnicode(NULL, 0);\n                   ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/cpython/unicodeobject.h:551:1: note: 'PyUnicode_FromUnicode' has been explicitly marked deprecated here\n    Py_DEPRECATED(3.3) PyAPI_FUNC(PyObject*) PyUnicode_FromUnicode(\n    ^\n    /Users/maximilianholler/.pyenv/versions/3.9.6/include/python3.9/pyport.h:508:54: note: expanded from macro 'Py_DEPRECATED'\n    #define Py_DEPRECATED(VERSION_UNUSED) __attribute__((__deprecated__))\n                                                         ^\n    14 warnings and 5 errors generated.\n    error: command '/usr/bin/clang' failed with exit code 1\n    ----------------------------------------\u001b[0m\n\u001b[?25h  Rolling back uninstall of pandas\n  Moving to /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/pandas-2.2.2.dist-info/\n   from /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/~andas-2.2.2.dist-info\n  Moving to /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/pandas/\n   from /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/lib/python3.9/site-packages/~andas\n\u001b[31mERROR: Command errored out with exit status 1: /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/bin/python3 -u -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-install-hobte39h/pandas_a84c1d312d2f43ed8ee1c221c5a2d60d/setup.py'\"'\"'; __file__='\"'\"'/private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-install-hobte39h/pandas_a84c1d312d2f43ed8ee1c221c5a2d60d/setup.py'\"'\"';f = getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__) if os.path.exists(__file__) else io.StringIO('\"'\"'from setuptools import setup; setup()'\"'\"');code = f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /private/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/pip-record-r74ortup/install-record.txt --single-version-externally-managed --compile --install-headers /Users/maximilianholler/Documents/programming/python_prov_o_sandbox/prov-env/include/site/python3.9/pandas Check the logs for full command output.\u001b[0m\n","output_type":"stream"}],"definitions":[],"definition_info":{},"time":"Wed, 10 Jul 2024 16:05:24 GMT"},{"execution_count":13,"used_data":["./assets/alb_esp1.mid"],"data_vars":["path_to_midi_file","print"],"execution_info":[{"name":"path_to_midi_file","type":"assign","dependencies":[],"lineno":3,"end_lineno":3,"col_offset":0,"end_col_offset":43},{"name":"print","type":"call","dependencies":["path_to_midi_file"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":44}],"code":"\n# Get the file name\npath_to_midi_file = './assets/alb_esp1.mid'\n\n# Print the uploaded file name\nprint(f\"Uploaded file: {path_to_midi_file}\")\n","cell_id":"2cd407c0-56e2-4bd7-843f-b84327706694","dependencies":["print"],"imports":[],"outputs":[{"name":"stdout","text":"Uploaded file: ./assets/alb_esp1.mid\n","output_type":"stream"}],"definitions":["path_to_midi_file"],"definition_info":{"path_to_midi_file":""},"time":"Wed, 10 Jul 2024 16:06:52 GMT"},{"execution_count":14,"used_data":[],"data_vars":[],"execution_info":[{"name":"y","type":"assign","dependencies":["librosa","path_to_audio_file"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":40},{"name":"sr","type":"assign","dependencies":["librosa","path_to_audio_file"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":40},{"name":"plt","type":"call","dependencies":[],"lineno":9,"end_lineno":9,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["y","sr"],"lineno":10,"end_lineno":10,"col_offset":0,"end_col_offset":34},{"name":"plt","type":"call","dependencies":[],"lineno":11,"end_lineno":11,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":[],"lineno":12,"end_lineno":12,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":13,"end_lineno":13,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":14,"end_lineno":14,"col_offset":0,"end_col_offset":10},{"name":"zcr","type":"assign","dependencies":["librosa","y"],"lineno":17,"end_lineno":17,"col_offset":0,"end_col_offset":43},{"name":"plt","type":"call","dependencies":[],"lineno":18,"end_lineno":18,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":["zcr"],"lineno":19,"end_lineno":19,"col_offset":0,"end_col_offset":16},{"name":"plt","type":"call","dependencies":[],"lineno":20,"end_lineno":20,"col_offset":0,"end_col_offset":31},{"name":"plt","type":"call","dependencies":[],"lineno":21,"end_lineno":21,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":22,"end_lineno":22,"col_offset":0,"end_col_offset":32},{"name":"plt","type":"call","dependencies":[],"lineno":23,"end_lineno":23,"col_offset":0,"end_col_offset":10},{"name":"rms","type":"assign","dependencies":["librosa","D"],"lineno":26,"end_lineno":26,"col_offset":0,"end_col_offset":30},{"name":"plt","type":"call","dependencies":[],"lineno":27,"end_lineno":27,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":["rms"],"lineno":28,"end_lineno":28,"col_offset":0,"end_col_offset":16},{"name":"plt","type":"call","dependencies":[],"lineno":29,"end_lineno":29,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":30,"end_lineno":30,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":31,"end_lineno":31,"col_offset":0,"end_col_offset":24},{"name":"plt","type":"call","dependencies":[],"lineno":32,"end_lineno":32,"col_offset":0,"end_col_offset":10},{"name":"contrast","type":"assign","dependencies":["librosa","D","sr"],"lineno":36,"end_lineno":36,"col_offset":0,"end_col_offset":56},{"name":"plt","type":"call","dependencies":[],"lineno":37,"end_lineno":37,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["contrast"],"lineno":38,"end_lineno":38,"col_offset":0,"end_col_offset":49},{"name":"plt","type":"call","dependencies":[],"lineno":39,"end_lineno":39,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":40,"end_lineno":40,"col_offset":0,"end_col_offset":30},{"name":"plt","type":"call","dependencies":[],"lineno":41,"end_lineno":41,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":42,"end_lineno":42,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":43,"end_lineno":43,"col_offset":0,"end_col_offset":10},{"name":"D","type":"assign","dependencies":["librosa","y"],"lineno":46,"end_lineno":46,"col_offset":0,"end_col_offset":19},{"name":"mfccs","type":"assign","dependencies":["librosa","D"],"lineno":49,"end_lineno":49,"col_offset":0,"end_col_offset":65},{"name":"plt","type":"call","dependencies":[],"lineno":50,"end_lineno":50,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["mfccs"],"lineno":51,"end_lineno":51,"col_offset":0,"end_col_offset":46},{"name":"plt","type":"call","dependencies":[],"lineno":52,"end_lineno":52,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":53,"end_lineno":53,"col_offset":0,"end_col_offset":18},{"name":"plt","type":"call","dependencies":[],"lineno":54,"end_lineno":54,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":55,"end_lineno":55,"col_offset":0,"end_col_offset":18},{"name":"plt","type":"call","dependencies":[],"lineno":56,"end_lineno":56,"col_offset":0,"end_col_offset":10},{"name":"chroma","type":"assign","dependencies":["librosa","D","sr"],"lineno":59,"end_lineno":59,"col_offset":0,"end_col_offset":48},{"name":"plt","type":"call","dependencies":[],"lineno":60,"end_lineno":60,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["chroma"],"lineno":61,"end_lineno":61,"col_offset":0,"end_col_offset":64},{"name":"plt","type":"call","dependencies":[],"lineno":62,"end_lineno":62,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":63,"end_lineno":63,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":[],"lineno":64,"end_lineno":64,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":65,"end_lineno":65,"col_offset":0,"end_col_offset":20},{"name":"plt","type":"call","dependencies":[],"lineno":66,"end_lineno":66,"col_offset":0,"end_col_offset":10}],"code":"import librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n\n# Load an audio file\ny, sr = librosa.load(path_to_audio_file)\n\n# Display the audio waveform\nplt.figure(figsize=(12, 4))\nlibrosa.display.waveshow(y, sr=sr)\nplt.title('Audio Waveform')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.show()\n\n# Extract Zero Crossing Rate\nzcr = librosa.feature.zero_crossing_rate(y)\nplt.figure(figsize=(12, 4))\nplt.plot(zcr[0])\nplt.title('Zero Crossing Rate')\nplt.xlabel('Time (s)')\nplt.ylabel('Zero Crossing Rate')\nplt.show()\n\n# Extract Root Mean Square (RMS) Energy\nrms = librosa.feature.rms(S=D)\nplt.figure(figsize=(12, 4))\nplt.plot(rms[0])\nplt.title('RMS Energy')\nplt.xlabel('Time (s)')\nplt.ylabel('RMS Energy')\nplt.show()\n\n\n# Extract Spectral Contrast\ncontrast = librosa.feature.spectral_contrast(S=D, sr=sr)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(contrast, x_axis='time')\nplt.colorbar()\nplt.title('Spectral Contrast')\nplt.xlabel('Time (s)')\nplt.ylabel('Contrast')\nplt.show()\n\n# Compute the power spectrogram\nD = librosa.stft(y)\n\n# Extract Mel-Frequency Cepstral Coefficients (MFCCs)\nmfccs = librosa.feature.mfcc(S=librosa.power_to_db(D), n_mfcc=13)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(mfccs, x_axis='time')\nplt.colorbar()\nplt.title('MFCCs')\nplt.xlabel('Time (s)')\nplt.ylabel('MFCC')\nplt.show()\n\n# Extract Chroma feature\nchroma = librosa.feature.chroma_stft(S=D, sr=sr)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(chroma, y_axis='chroma', x_axis='time')\nplt.colorbar()\nplt.title('Chroma Feature')\nplt.xlabel('Time (s)')\nplt.ylabel('Chroma')\nplt.show()\n","cell_id":"22519439-4f0f-47e4-ae90-e633303c61f2","dependencies":["path_to_audio_file","D"],"imports":["librosa","librosa.display","plt"],"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/ipykernel_32856/2487581317.py\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Load an audio file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibrosa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_to_audio_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Display the audio waveform\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'path_to_audio_file' is not defined"],"ename":"NameError","evalue":"name 'path_to_audio_file' is not defined","output_type":"error"}],"definitions":["y","sr","zcr","rms","contrast","D","mfccs","chroma"],"definition_info":{"y":"","sr":"","zcr":"","rms":"","contrast":"","D":"","mfccs":"","chroma":""},"time":"Wed, 10 Jul 2024 16:07:11 GMT"},{"execution_count":15,"used_data":["./assets/alb_esp1.mid","./assets/alb_esp1.mp3"],"data_vars":["path_to_midi_file","path_to_audio_file","print"],"execution_info":[{"name":"path_to_midi_file","type":"assign","dependencies":[],"lineno":3,"end_lineno":3,"col_offset":0,"end_col_offset":43},{"name":"path_to_audio_file","type":"assign","dependencies":[],"lineno":5,"end_lineno":5,"col_offset":0,"end_col_offset":44},{"name":"print","type":"call","dependencies":["path_to_midi_file"],"lineno":9,"end_lineno":9,"col_offset":0,"end_col_offset":44}],"code":"\n# Get the file name\npath_to_midi_file = './assets/alb_esp1.mid'\n\npath_to_audio_file = './assets/alb_esp1.mp3'\n\n\n# Print the uploaded file name\nprint(f\"Uploaded file: {path_to_midi_file}\")\n","cell_id":"2cd407c0-56e2-4bd7-843f-b84327706694","dependencies":["print"],"imports":[],"outputs":[{"name":"stdout","text":"Uploaded file: ./assets/alb_esp1.mid\n","output_type":"stream"}],"definitions":["path_to_midi_file","path_to_audio_file"],"definition_info":{"path_to_midi_file":"","path_to_audio_file":""},"time":"Wed, 10 Jul 2024 16:07:56 GMT"},{"execution_count":16,"used_data":[],"data_vars":[],"execution_info":[{"name":"y","type":"assign","dependencies":["librosa","path_to_audio_file"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":40},{"name":"sr","type":"assign","dependencies":["librosa","path_to_audio_file"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":40},{"name":"plt","type":"call","dependencies":[],"lineno":9,"end_lineno":9,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["y","sr"],"lineno":10,"end_lineno":10,"col_offset":0,"end_col_offset":34},{"name":"plt","type":"call","dependencies":[],"lineno":11,"end_lineno":11,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":[],"lineno":12,"end_lineno":12,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":13,"end_lineno":13,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":14,"end_lineno":14,"col_offset":0,"end_col_offset":10},{"name":"zcr","type":"assign","dependencies":["librosa","y"],"lineno":17,"end_lineno":17,"col_offset":0,"end_col_offset":43},{"name":"plt","type":"call","dependencies":[],"lineno":18,"end_lineno":18,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":["zcr"],"lineno":19,"end_lineno":19,"col_offset":0,"end_col_offset":16},{"name":"plt","type":"call","dependencies":[],"lineno":20,"end_lineno":20,"col_offset":0,"end_col_offset":31},{"name":"plt","type":"call","dependencies":[],"lineno":21,"end_lineno":21,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":22,"end_lineno":22,"col_offset":0,"end_col_offset":32},{"name":"plt","type":"call","dependencies":[],"lineno":23,"end_lineno":23,"col_offset":0,"end_col_offset":10},{"name":"rms","type":"assign","dependencies":["librosa","D"],"lineno":26,"end_lineno":26,"col_offset":0,"end_col_offset":30},{"name":"plt","type":"call","dependencies":[],"lineno":27,"end_lineno":27,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":["rms"],"lineno":28,"end_lineno":28,"col_offset":0,"end_col_offset":16},{"name":"plt","type":"call","dependencies":[],"lineno":29,"end_lineno":29,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":30,"end_lineno":30,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":31,"end_lineno":31,"col_offset":0,"end_col_offset":24},{"name":"plt","type":"call","dependencies":[],"lineno":32,"end_lineno":32,"col_offset":0,"end_col_offset":10},{"name":"contrast","type":"assign","dependencies":["librosa","D","sr"],"lineno":36,"end_lineno":36,"col_offset":0,"end_col_offset":56},{"name":"plt","type":"call","dependencies":[],"lineno":37,"end_lineno":37,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["contrast"],"lineno":38,"end_lineno":38,"col_offset":0,"end_col_offset":49},{"name":"plt","type":"call","dependencies":[],"lineno":39,"end_lineno":39,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":40,"end_lineno":40,"col_offset":0,"end_col_offset":30},{"name":"plt","type":"call","dependencies":[],"lineno":41,"end_lineno":41,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":42,"end_lineno":42,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":43,"end_lineno":43,"col_offset":0,"end_col_offset":10},{"name":"D","type":"assign","dependencies":["librosa","y"],"lineno":46,"end_lineno":46,"col_offset":0,"end_col_offset":19},{"name":"mfccs","type":"assign","dependencies":["librosa","D"],"lineno":49,"end_lineno":49,"col_offset":0,"end_col_offset":65},{"name":"plt","type":"call","dependencies":[],"lineno":50,"end_lineno":50,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["mfccs"],"lineno":51,"end_lineno":51,"col_offset":0,"end_col_offset":46},{"name":"plt","type":"call","dependencies":[],"lineno":52,"end_lineno":52,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":53,"end_lineno":53,"col_offset":0,"end_col_offset":18},{"name":"plt","type":"call","dependencies":[],"lineno":54,"end_lineno":54,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":55,"end_lineno":55,"col_offset":0,"end_col_offset":18},{"name":"plt","type":"call","dependencies":[],"lineno":56,"end_lineno":56,"col_offset":0,"end_col_offset":10},{"name":"chroma","type":"assign","dependencies":["librosa","D","sr"],"lineno":59,"end_lineno":59,"col_offset":0,"end_col_offset":48},{"name":"plt","type":"call","dependencies":[],"lineno":60,"end_lineno":60,"col_offset":0,"end_col_offset":27},{"name":"librosa","type":"call","dependencies":["chroma"],"lineno":61,"end_lineno":61,"col_offset":0,"end_col_offset":64},{"name":"plt","type":"call","dependencies":[],"lineno":62,"end_lineno":62,"col_offset":0,"end_col_offset":14},{"name":"plt","type":"call","dependencies":[],"lineno":63,"end_lineno":63,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":[],"lineno":64,"end_lineno":64,"col_offset":0,"end_col_offset":22},{"name":"plt","type":"call","dependencies":[],"lineno":65,"end_lineno":65,"col_offset":0,"end_col_offset":20},{"name":"plt","type":"call","dependencies":[],"lineno":66,"end_lineno":66,"col_offset":0,"end_col_offset":10}],"code":"import librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n\n# Load an audio file\ny, sr = librosa.load(path_to_audio_file)\n\n# Display the audio waveform\nplt.figure(figsize=(12, 4))\nlibrosa.display.waveshow(y, sr=sr)\nplt.title('Audio Waveform')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.show()\n\n# Extract Zero Crossing Rate\nzcr = librosa.feature.zero_crossing_rate(y)\nplt.figure(figsize=(12, 4))\nplt.plot(zcr[0])\nplt.title('Zero Crossing Rate')\nplt.xlabel('Time (s)')\nplt.ylabel('Zero Crossing Rate')\nplt.show()\n\n# Extract Root Mean Square (RMS) Energy\nrms = librosa.feature.rms(S=D)\nplt.figure(figsize=(12, 4))\nplt.plot(rms[0])\nplt.title('RMS Energy')\nplt.xlabel('Time (s)')\nplt.ylabel('RMS Energy')\nplt.show()\n\n\n# Extract Spectral Contrast\ncontrast = librosa.feature.spectral_contrast(S=D, sr=sr)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(contrast, x_axis='time')\nplt.colorbar()\nplt.title('Spectral Contrast')\nplt.xlabel('Time (s)')\nplt.ylabel('Contrast')\nplt.show()\n\n# Compute the power spectrogram\nD = librosa.stft(y)\n\n# Extract Mel-Frequency Cepstral Coefficients (MFCCs)\nmfccs = librosa.feature.mfcc(S=librosa.power_to_db(D), n_mfcc=13)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(mfccs, x_axis='time')\nplt.colorbar()\nplt.title('MFCCs')\nplt.xlabel('Time (s)')\nplt.ylabel('MFCC')\nplt.show()\n\n# Extract Chroma feature\nchroma = librosa.feature.chroma_stft(S=D, sr=sr)\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(chroma, y_axis='chroma', x_axis='time')\nplt.colorbar()\nplt.title('Chroma Feature')\nplt.xlabel('Time (s)')\nplt.ylabel('Chroma')\nplt.show()\n","cell_id":"22519439-4f0f-47e4-ae90-e633303c61f2","dependencies":["path_to_audio_file","D"],"imports":["librosa","librosa.display","plt"],"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/ipykernel_32856/2487581317.py\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;31m# Extract Root Mean Square (RMS) Energy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0mrms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibrosa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrms\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mS\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mD\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'D' is not defined"],"ename":"NameError","evalue":"name 'D' is not defined","output_type":"error"}],"definitions":["y","sr","zcr","rms","contrast","D","mfccs","chroma"],"definition_info":{"y":"","sr":"","zcr":"","rms":"","contrast":"","D":"","mfccs":"","chroma":""},"time":"Wed, 10 Jul 2024 16:08:01 GMT"},{"execution_count":17,"used_data":[],"data_vars":[],"execution_info":[{"name":"midi_data","type":"assign","dependencies":["pretty_midi","path_to_midi_file"],"lineno":5,"end_lineno":5,"col_offset":0,"end_col_offset":53},{"name":"piano_roll","type":"assign","dependencies":["midi_data"],"lineno":8,"end_lineno":8,"col_offset":0,"end_col_offset":39},{"name":"plt","type":"call","dependencies":[],"lineno":11,"end_lineno":11,"col_offset":0,"end_col_offset":27},{"name":"plt","type":"call","dependencies":["piano_roll"],"lineno":12,"end_lineno":12,"col_offset":0,"end_col_offset":66},{"name":"plt","type":"call","dependencies":[],"lineno":13,"end_lineno":13,"col_offset":0,"end_col_offset":18},{"name":"plt","type":"call","dependencies":[],"lineno":14,"end_lineno":14,"col_offset":0,"end_col_offset":23},{"name":"plt","type":"call","dependencies":[],"lineno":15,"end_lineno":15,"col_offset":0,"end_col_offset":51},{"name":"plt","type":"call","dependencies":[],"lineno":16,"end_lineno":16,"col_offset":0,"end_col_offset":30},{"name":"plt","type":"call","dependencies":[],"lineno":17,"end_lineno":17,"col_offset":0,"end_col_offset":10}],"code":"import pretty_midi\nimport matplotlib.pyplot as plt\n\n# Load MIDI file into pretty_midi.PrettyMIDI object\nmidi_data = pretty_midi.PrettyMIDI(path_to_midi_file)\n\n# Create a piano roll representation\npiano_roll = midi_data.get_piano_roll()\n\n# Plot the piano roll\nplt.figure(figsize=(12, 4))\nplt.imshow(piano_roll, origin='lower', aspect='auto', cmap='gray')\nplt.xlabel('Time')\nplt.ylabel('MIDI Note')\nplt.title('Piano Roll Representation of MIDI File')\nplt.colorbar(label='Velocity')\nplt.show()\n","cell_id":"0174dd31-0ffe-43f7-98f7-f877e6ddb18c","dependencies":["path_to_midi_file"],"imports":["pretty_midi","plt"],"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":"\n"},"metadata":{}}],"definitions":["midi_data","piano_roll"],"definition_info":{"midi_data":"","piano_roll":""},"time":"Wed, 10 Jul 2024 16:08:17 GMT"},{"execution_count":18,"used_data":[],"data_vars":[],"execution_info":[{"name":"extract_pitch","type":"function","dependencies":["audio_file","range","np"],"lineno":9,"end_lineno":16,"col_offset":0,"end_col_offset":26},{"name":"extract_midi_pitch","type":"function","dependencies":["midi_file","np"],"lineno":19,"end_lineno":25,"col_offset":0,"end_col_offset":26},{"name":"dtw_alignment","type":"function","dependencies":["audio_pitch","score_pitch"],"lineno":28,"end_lineno":32,"col_offset":0,"end_col_offset":25},{"name":"audio_file","type":"assign","dependencies":["path_to_audio_file"],"lineno":35,"end_lineno":35,"col_offset":0,"end_col_offset":31},{"name":"midi_file","type":"assign","dependencies":["path_to_midi_file"],"lineno":36,"end_lineno":36,"col_offset":0,"end_col_offset":29},{"name":"audio_pitch","type":"assign","dependencies":["extract_pitch","audio_file"],"lineno":39,"end_lineno":39,"col_offset":0,"end_col_offset":39},{"name":"score_pitch","type":"assign","dependencies":["extract_midi_pitch","midi_file"],"lineno":40,"end_lineno":40,"col_offset":0,"end_col_offset":43},{"name":"audio_pitch","type":"assign","dependencies":["audio_pitch"],"lineno":43,"end_lineno":43,"col_offset":0,"end_col_offset":42},{"name":"score_pitch","type":"assign","dependencies":["score_pitch"],"lineno":44,"end_lineno":44,"col_offset":0,"end_col_offset":42},{"name":"distance","type":"assign","dependencies":["dtw_alignment","audio_pitch","score_pitch"],"lineno":47,"end_lineno":47,"col_offset":0,"end_col_offset":56},{"name":"path","type":"assign","dependencies":["dtw_alignment","audio_pitch","score_pitch"],"lineno":47,"end_lineno":47,"col_offset":0,"end_col_offset":56},{"name":"print","type":"call","dependencies":["distance"],"lineno":50,"end_lineno":50,"col_offset":0,"end_col_offset":34},{"name":"alignment_matrix","type":"assign","dependencies":["np","len","audio_pitch","score_pitch"],"lineno":53,"end_lineno":53,"col_offset":0,"end_col_offset":65},{"type":"loop","lineno":56,"end_lineno":57,"col_offset":0,"end_col_offset":30,"body":[],"orelse":[],"dependencies":["path"]},{"name":"plt","type":"call","dependencies":["alignment_matrix"],"lineno":60,"end_lineno":60,"col_offset":0,"end_col_offset":82},{"name":"plt","type":"call","dependencies":[],"lineno":61,"end_lineno":61,"col_offset":0,"end_col_offset":31},{"name":"plt","type":"call","dependencies":[],"lineno":62,"end_lineno":62,"col_offset":0,"end_col_offset":31},{"name":"plt","type":"call","dependencies":[],"lineno":63,"end_lineno":63,"col_offset":0,"end_col_offset":29},{"name":"plt","type":"call","dependencies":[],"lineno":64,"end_lineno":64,"col_offset":0,"end_col_offset":10}],"code":"import librosa\nimport pretty_midi\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom fastdtw import fastdtw\nfrom scipy.spatial.distance import euclidean\n\n# Function to extract pitch from audio\ndef extract_pitch(audio_file, sr=22050):\n    y, sr = librosa.load(audio_file, sr=sr)\n    pitches, magnitudes = librosa.piptrack(y=y, sr=sr)\n    pitch = []\n    for t in range(pitches.shape[1]):\n        index = magnitudes[:, t].argmax()\n        pitch.append(pitches[index, t])\n    return np.array(pitch)\n\n# Function to extract pitch from MIDI file\ndef extract_midi_pitch(midi_file):\n    midi_data = pretty_midi.PrettyMIDI(midi_file)\n    pitch = []\n    for instrument in midi_data.instruments:\n        for note in instrument.notes:\n            pitch.append(note.pitch)\n    return np.array(pitch)\n\n# Function to perform DTW-based alignment using fastdtw\ndef dtw_alignment(audio_pitch, score_pitch):\n    audio_pitch_2d = audio_pitch.reshape(-1, 1)\n    score_pitch_2d = score_pitch.reshape(-1, 1)\n    distance, path = fastdtw(audio_pitch_2d, score_pitch_2d, dist=euclidean)\n    return distance, path\n\n# Example usage\naudio_file = path_to_audio_file  # audio file path\nmidi_file = path_to_midi_file   # MIDI file path\n\n# Extract pitch sequences\naudio_pitch = extract_pitch(audio_file)\nscore_pitch = extract_midi_pitch(midi_file)\n\n# Remove silent parts\naudio_pitch = audio_pitch[audio_pitch > 0]\nscore_pitch = score_pitch[score_pitch > 0]\n\n# Perform alignment\ndistance, path = dtw_alignment(audio_pitch, score_pitch)\n\n# Print the DTW distance\nprint(f'DTW Distance: {distance}')\n\n# Create a matrix of zeros\nalignment_matrix = np.zeros((len(audio_pitch), len(score_pitch)))\n\n# Set the aligned indices to 1\nfor i, j in path:\n    alignment_matrix[i, j] = 1\n\n# Visualize the alignment matrix\nplt.imshow(alignment_matrix, origin='lower', cmap='gray', interpolation='nearest')\nplt.xlabel('Audio Pitch Index')\nplt.ylabel('Score Pitch Index')\nplt.title('Alignment Matrix')\nplt.show()\n","cell_id":"046a2ec6-8716-48c5-ab8d-4aa803512aff","dependencies":["audio_file","range","midi_file","audio_pitch","score_pitch","path_to_audio_file","path_to_midi_file","print","len"],"imports":["librosa","pretty_midi","np","plt","fastdtw","euclidean"],"outputs":[{"name":"stdout","text":"DTW Distance: 1446231.3226623535\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"definitions":["extract_pitch","extract_midi_pitch","dtw_alignment","audio_file","midi_file","audio_pitch","score_pitch","distance","path","alignment_matrix","i","j"],"definition_info":{"extract_pitch":"","extract_midi_pitch":"","dtw_alignment":"","audio_file":"","midi_file":"","audio_pitch":"","score_pitch":"","distance":"","path":"","alignment_matrix":"","i":"","j":""},"time":"Wed, 10 Jul 2024 16:08:18 GMT"},{"execution_count":19,"used_data":[],"data_vars":[],"execution_info":[{"name":"extract_chroma_features","type":"function","dependencies":["audio_file"],"lineno":6,"end_lineno":9,"col_offset":0,"end_col_offset":17},{"name":"extract_score_features","type":"function","dependencies":["midi_file","note","instrument","np"],"lineno":12,"end_lineno":16,"col_offset":0,"end_col_offset":28},{"name":"dtw_distance","type":"function","dependencies":["len","x","y","range","dist_function","min"],"lineno":19,"end_lineno":44,"col_offset":0,"end_col_offset":20},{"name":"perform_alignment","type":"function","dependencies":["x","y","chroma_features","score_features"],"lineno":47,"end_lineno":56,"col_offset":0,"end_col_offset":19},{"type":"condition","lineno":59,"end_lineno":69,"col_offset":0,"end_col_offset":58,"body":[{"name":"audio_file","type":"assign","dependencies":["path_to_audio_file"],"lineno":60,"end_lineno":60,"col_offset":4,"end_col_offset":35},{"name":"midi_file","type":"assign","dependencies":["path_to_midi_file"],"lineno":61,"end_lineno":61,"col_offset":4,"end_col_offset":33},{"name":"chroma_features","type":"assign","dependencies":["extract_chroma_features","audio_file"],"lineno":63,"end_lineno":63,"col_offset":4,"end_col_offset":57},{"name":"pitches","type":"assign","dependencies":["extract_score_features","midi_file"],"lineno":64,"end_lineno":64,"col_offset":4,"end_col_offset":47},{"name":"alignment_distance","type":"assign","dependencies":["perform_alignment","chroma_features","pitches"],"lineno":67,"end_lineno":67,"col_offset":4,"end_col_offset":68},{"name":"print","type":"call","dependencies":["alignment_distance"],"lineno":69,"end_lineno":69,"col_offset":4,"end_col_offset":58}],"orelse":[],"dependencies":["__name__","path_to_audio_file","path_to_midi_file","print"]}],"code":"import librosa\nimport numpy as np\nimport pretty_midi\n\n# Step 1: Extract chroma features from audio\ndef extract_chroma_features(audio_file):\n    y, sr = librosa.load(audio_file)\n    chroma = librosa.feature.chroma_stft(y=y, sr=sr)\n    return chroma\n\n# Step 2: Extract score features (pitches) using pretty_midi\ndef extract_score_features(midi_file):\n    # Use pretty_midi to extract pitches\n    midi_data = pretty_midi.PrettyMIDI(midi_file)\n    pitches = [note.pitch for instrument in midi_data.instruments for note in instrument.notes]\n    return np.array(pitches)\n\n# Step 3: Dynamic Time Warping (DTW) function\ndef dtw_distance(x, y, dist_function):\n    \"\"\"\n    Computes the DTW distance between sequences x and y using a given distance function.\n\n    Parameters:\n    - x, y: Input sequences (2D arrays)\n    - dist_function: Function to compute distance between elements of x and y\n\n    Returns:\n    - DTW distance\n    \"\"\"\n    m, n = len(x), len(y)\n    D = np.zeros((m, n))\n\n    # Initialize the cost matrix\n    for i in range(m):\n        for j in range(n):\n            D[i, j] = dist_function(x[i], y[j])\n\n    # Compute accumulated cost matrix\n    for i in range(1, m):\n        for j in range(1, n):\n            D[i, j] += min(D[i-1, j], D[i, j-1], D[i-1, j-1])\n\n    # Return DTW distance\n    return D[-1, -1]\n\n# Step 4: Perform DTW alignment\ndef perform_alignment(chroma_features, score_features):\n    # Define the distance function for DTW\n    def distance_function(x, y):\n        # Calculate the L1 norm distance between x and y\n        return np.linalg.norm(x - y, ord=1)\n\n    # Calculate DTW distance\n    dtw_dist = dtw_distance(chroma_features.T, score_features.T, dist_function=distance_function)\n\n    return dtw_dist\n\n# Example usage\nif __name__ == \"__main__\":\n    audio_file = path_to_audio_file\n    midi_file = path_to_midi_file\n\n    chroma_features = extract_chroma_features(audio_file)\n    pitches = extract_score_features(midi_file)  # Extract pitches using pretty_midi\n\n    # Perform alignment\n    alignment_distance = perform_alignment(chroma_features, pitches)\n\n    print(f\"DTW Alignment distance: {alignment_distance}\")\n","cell_id":"a7c848c8-e3a7-4c45-bb9a-c1996bf1fbac","dependencies":["audio_file","midi_file","note","instrument","len","x","y","range","dist_function","min","chroma_features","score_features","__name__","path_to_audio_file","path_to_midi_file","print"],"imports":["librosa","np","pretty_midi"],"outputs":[{"name":"stdout","text":"DTW Alignment distance: 515409.9775695801\n","output_type":"stream"}],"definitions":["extract_chroma_features","extract_score_features","dtw_distance","perform_alignment","audio_file","midi_file","chroma_features","pitches","alignment_distance"],"definition_info":{"extract_chroma_features":"","extract_score_features":"","dtw_distance":"","perform_alignment":"","audio_file":"","midi_file":"","chroma_features":"","pitches":"","alignment_distance":""},"time":"Wed, 10 Jul 2024 16:08:26 GMT"},{"execution_count":20,"used_data":[],"data_vars":[],"execution_info":[{"name":"extract_pitch","type":"function","dependencies":["audio_file","range","np"],"lineno":11,"end_lineno":18,"col_offset":0,"end_col_offset":26},{"name":"extract_midi_pitch","type":"function","dependencies":["midi_file","np"],"lineno":21,"end_lineno":27,"col_offset":0,"end_col_offset":26},{"name":"dtw_alignment","type":"function","dependencies":["audio_pitch","score_pitch"],"lineno":30,"end_lineno":35,"col_offset":0,"end_col_offset":13},{"name":"hmm_alignment","type":"function","dependencies":["len","score_pitch","range","audio_pitch","list","zip"],"lineno":38,"end_lineno":52,"col_offset":0,"end_col_offset":13},{"name":"evaluate_alignment","type":"function","dependencies":["wp","audio_pitch","i","j","score_pitch","range","len"],"lineno":55,"end_lineno":70,"col_offset":0,"end_col_offset":44},{"name":"audio_file","type":"assign","dependencies":["path_to_audio_file"],"lineno":73,"end_lineno":73,"col_offset":0,"end_col_offset":31},{"name":"midi_file","type":"assign","dependencies":["path_to_midi_file"],"lineno":74,"end_lineno":74,"col_offset":0,"end_col_offset":29},{"name":"audio_pitch","type":"assign","dependencies":["extract_pitch","audio_file"],"lineno":77,"end_lineno":77,"col_offset":0,"end_col_offset":39},{"name":"score_pitch","type":"assign","dependencies":["extract_midi_pitch","midi_file"],"lineno":78,"end_lineno":78,"col_offset":0,"end_col_offset":43},{"name":"audio_pitch","type":"assign","dependencies":["audio_pitch"],"lineno":81,"end_lineno":81,"col_offset":0,"end_col_offset":42},{"name":"score_pitch","type":"assign","dependencies":["score_pitch"],"lineno":82,"end_lineno":82,"col_offset":0,"end_col_offset":42},{"name":"wp_dtw","type":"assign","dependencies":["dtw_alignment","audio_pitch","score_pitch"],"lineno":85,"end_lineno":85,"col_offset":0,"end_col_offset":48},{"name":"wp_hmm","type":"assign","dependencies":["hmm_alignment","audio_pitch","score_pitch"],"lineno":86,"end_lineno":86,"col_offset":0,"end_col_offset":48},{"name":"precision_dtw","type":"assign","dependencies":["evaluate_alignment","wp_dtw","audio_pitch","score_pitch"],"lineno":89,"end_lineno":89,"col_offset":0,"end_col_offset":104},{"name":"recall_dtw","type":"assign","dependencies":["evaluate_alignment","wp_dtw","audio_pitch","score_pitch"],"lineno":89,"end_lineno":89,"col_offset":0,"end_col_offset":104},{"name":"f1_dtw","type":"assign","dependencies":["evaluate_alignment","wp_dtw","audio_pitch","score_pitch"],"lineno":89,"end_lineno":89,"col_offset":0,"end_col_offset":104},{"name":"error_rate_dtw","type":"assign","dependencies":["evaluate_alignment","wp_dtw","audio_pitch","score_pitch"],"lineno":89,"end_lineno":89,"col_offset":0,"end_col_offset":104},{"name":"precision_hmm","type":"assign","dependencies":["evaluate_alignment","wp_hmm","audio_pitch","score_pitch"],"lineno":90,"end_lineno":90,"col_offset":0,"end_col_offset":104},{"name":"recall_hmm","type":"assign","dependencies":["evaluate_alignment","wp_hmm","audio_pitch","score_pitch"],"lineno":90,"end_lineno":90,"col_offset":0,"end_col_offset":104},{"name":"f1_hmm","type":"assign","dependencies":["evaluate_alignment","wp_hmm","audio_pitch","score_pitch"],"lineno":90,"end_lineno":90,"col_offset":0,"end_col_offset":104},{"name":"error_rate_hmm","type":"assign","dependencies":["evaluate_alignment","wp_hmm","audio_pitch","score_pitch"],"lineno":90,"end_lineno":90,"col_offset":0,"end_col_offset":104},{"name":"print","type":"call","dependencies":["precision_dtw","recall_dtw","f1_dtw","error_rate_dtw"],"lineno":93,"end_lineno":93,"col_offset":0,"end_col_offset":140},{"name":"print","type":"call","dependencies":["precision_hmm","recall_hmm","f1_hmm","error_rate_hmm"],"lineno":94,"end_lineno":94,"col_offset":0,"end_col_offset":140},{"name":"plot_alignment","type":"function","dependencies":["wp","title"],"lineno":97,"end_lineno":107,"col_offset":0,"end_col_offset":14},{"name":"plot_alignment","type":"call","dependencies":["wp_dtw","audio_pitch","score_pitch"],"lineno":109,"end_lineno":109,"col_offset":0,"end_col_offset":65},{"name":"plot_alignment","type":"call","dependencies":["wp_hmm","audio_pitch","score_pitch"],"lineno":110,"end_lineno":110,"col_offset":0,"end_col_offset":65}],"code":"import librosa\nimport pretty_midi\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.spatial.distance import euclidean\nfrom hmmlearn import hmm\nfrom fastdtw import fastdtw\nimport mir_eval\n\n# Function to extract pitch from audio\ndef extract_pitch(audio_file, sr=22050):\n    y, sr = librosa.load(audio_file, sr=sr)\n    pitches, magnitudes = librosa.piptrack(y=y, sr=sr)\n    pitch = []\n    for t in range(pitches.shape[1]):\n        index = magnitudes[:, t].argmax()\n        pitch.append(pitches[index, t])\n    return np.array(pitch)\n\n# Function to extract pitch from MIDI file\ndef extract_midi_pitch(midi_file):\n    midi_data = pretty_midi.PrettyMIDI(midi_file)\n    pitch = []\n    for instrument in midi_data.instruments:\n        for note in instrument.notes:\n            pitch.append(note.pitch)\n    return np.array(pitch)\n\n# Function to perform DTW-based alignment using fastdtw\ndef dtw_alignment(audio_pitch, score_pitch):\n    audio_pitch_2d = audio_pitch.reshape(-1, 1)\n    score_pitch_2d = score_pitch.reshape(-1, 1)\n    distance, path = fastdtw(audio_pitch_2d, score_pitch_2d, dist=euclidean)\n    wp = np.array(path)\n    return wp\n\n# Function to perform HMM-based alignment\ndef hmm_alignment(audio_pitch, score_pitch):\n    n_components = len(score_pitch)\n    model = hmm.GaussianHMM(n_components=n_components, covariance_type=\"diag\", n_iter=100)\n    model.startprob_ = np.zeros(n_components)\n    model.startprob_[0] = 1.0\n    model.transmat_ = np.zeros((n_components, n_components))\n    for i in range(n_components - 1):\n        model.transmat_[i, i] = 0.5\n        model.transmat_[i, i + 1] = 0.5\n    model.transmat_[-1, -1] = 1.0\n    model.means_ = score_pitch.reshape(-1, 1)\n    model.covars_ = np.tile(np.identity(1), (n_components, 1)) * 0.1\n    logprob, states = model.decode(audio_pitch.reshape(-1, 1), algorithm=\"viterbi\")\n    wp = list(zip(np.arange(len(audio_pitch)), states))\n    return wp\n\n# Function to evaluate the alignment\ndef evaluate_alignment(wp, audio_pitch, score_pitch, tolerance=0.05):\n    wp = np.array(wp)\n    aligned_audio = np.array([audio_pitch[i] for i, j in wp])\n    aligned_score = np.array([score_pitch[j] for i, j in wp])\n\n    # Convert pitches to onset/offset format required by mir_eval\n    audio_intervals = np.array([[i/100.0, (i+1)/100.0] for i in range(len(aligned_audio))])\n    score_intervals = np.array([[j/100.0, (j+1)/100.0] for j in range(len(aligned_score))])\n\n    # Calculate precision, recall, and F1-score\n    precision, recall, f1, _ = mir_eval.transcription.precision_recall_f1_overlap(\n        score_intervals, aligned_score, audio_intervals, aligned_audio, offset_ratio=None)\n\n    # Calculate alignment error rate\n    error_rate = np.mean(np.abs(aligned_audio - aligned_score))\n    return precision, recall, f1, error_rate\n\n# Example usage\naudio_file = path_to_audio_file  # Replace with your audio file path\nmidi_file = path_to_midi_file   # Replace with your MIDI file path\n\n# Extract pitch sequences\naudio_pitch = extract_pitch(audio_file)\nscore_pitch = extract_midi_pitch(midi_file)\n\n# Remove silent parts\naudio_pitch = audio_pitch[audio_pitch > 0]\nscore_pitch = score_pitch[score_pitch > 0]\n\n# Perform alignments\nwp_dtw = dtw_alignment(audio_pitch, score_pitch)\nwp_hmm = hmm_alignment(audio_pitch, score_pitch)\n\n# Evaluate alignments\nprecision_dtw, recall_dtw, f1_dtw, error_rate_dtw = evaluate_alignment(wp_dtw, audio_pitch, score_pitch)\nprecision_hmm, recall_hmm, f1_hmm, error_rate_hmm = evaluate_alignment(wp_hmm, audio_pitch, score_pitch)\n\n# Print the evaluation metrics\nprint(f'DTW Alignment - Precision: {precision_dtw:.2f}, Recall: {recall_dtw:.2f}, F1 Score: {f1_dtw:.2f}, Error Rate: {error_rate_dtw:.2f}')\nprint(f'HMM Alignment - Precision: {precision_hmm:.2f}, Recall: {recall_hmm:.2f}, F1 Score: {f1_hmm:.2f}, Error Rate: {error_rate_hmm:.2f}')\n\n# Plot alignments\ndef plot_alignment(wp, audio_pitch, score_pitch, title):\n    plt.figure(figsize=(10, 4))\n    plt.plot(audio_pitch, label='Audio Pitch')\n    plt.plot(score_pitch, label='Score Pitch')\n    for i, j in wp:\n        plt.plot([i, j], [audio_pitch[i], score_pitch[j]], color='gray', alpha=0.5)\n    plt.legend()\n    plt.xlabel('Time')\n    plt.ylabel('Pitch')\n    plt.title(title)\n    plt.show()\n\nplot_alignment(wp_dtw, audio_pitch, score_pitch, 'DTW Alignment')\nplot_alignment(wp_hmm, audio_pitch, score_pitch, 'HMM Alignment')\n","cell_id":"afafe248-b33d-4add-bbca-88fb2a413b36","dependencies":["audio_file","range","midi_file","audio_pitch","score_pitch","len","list","zip","wp","i","j","path_to_audio_file","path_to_midi_file","print","title"],"imports":["librosa","pretty_midi","np","plt","euclidean","hmm","fastdtw","mir_eval"],"outputs":[{"name":"stdout","text":"DTW Alignment - Precision: 0.00, Recall: 0.00, F1 Score: 0.00, Error Rate: 365.39\nHMM Alignment - Precision: 0.00, Recall: 0.00, F1 Score: 0.00, Error Rate: 354.47\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"definitions":["extract_pitch","extract_midi_pitch","dtw_alignment","hmm_alignment","evaluate_alignment","audio_file","midi_file","audio_pitch","score_pitch","wp_dtw","wp_hmm","precision_dtw","recall_dtw","f1_dtw","error_rate_dtw","precision_hmm","recall_hmm","f1_hmm","error_rate_hmm","plot_alignment"],"definition_info":{"extract_pitch":"","extract_midi_pitch":"","dtw_alignment":"","hmm_alignment":"","evaluate_alignment":"","audio_file":"","midi_file":"","audio_pitch":"","score_pitch":"","wp_dtw":"","wp_hmm":"","precision_dtw":"","recall_dtw":"","f1_dtw":"","error_rate_dtw":"","precision_hmm":"","recall_hmm":"","f1_hmm":"","error_rate_hmm":"","plot_alignment":""},"time":"Wed, 10 Jul 2024 16:08:43 GMT"},{"execution_count":21,"used_data":[],"data_vars":[],"execution_info":[{"name":"X_train","type":"assign","dependencies":["train_test_split","X","y"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":89},{"name":"X_temp","type":"assign","dependencies":["train_test_split","X","y"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":89},{"name":"y_train","type":"assign","dependencies":["train_test_split","X","y"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":89},{"name":"y_temp","type":"assign","dependencies":["train_test_split","X","y"],"lineno":6,"end_lineno":6,"col_offset":0,"end_col_offset":89},{"name":"X_val","type":"assign","dependencies":["train_test_split","X_temp","y_temp"],"lineno":7,"end_lineno":7,"col_offset":0,"end_col_offset":95},{"name":"X_test","type":"assign","dependencies":["train_test_split","X_temp","y_temp"],"lineno":7,"end_lineno":7,"col_offset":0,"end_col_offset":95},{"name":"y_val","type":"assign","dependencies":["train_test_split","X_temp","y_temp"],"lineno":7,"end_lineno":7,"col_offset":0,"end_col_offset":95},{"name":"y_test","type":"assign","dependencies":["train_test_split","X_temp","y_temp"],"lineno":7,"end_lineno":7,"col_offset":0,"end_col_offset":95},{"name":"y_train","type":"assign","dependencies":["y_train"],"lineno":10,"end_lineno":10,"col_offset":0,"end_col_offset":32},{"name":"y_val","type":"assign","dependencies":["y_val"],"lineno":11,"end_lineno":11,"col_offset":0,"end_col_offset":28},{"name":"y_test","type":"assign","dependencies":["y_test"],"lineno":12,"end_lineno":12,"col_offset":0,"end_col_offset":30},{"name":"model","type":"assign","dependencies":["create_model","X_train"],"lineno":15,"end_lineno":15,"col_offset":0,"end_col_offset":53},{"name":"model","type":"assign","dependencies":["train_model","model","X_train","y_train","X_val","y_val"],"lineno":18,"end_lineno":18,"col_offset":0,"end_col_offset":93},{"name":"history","type":"assign","dependencies":["train_model","model","X_train","y_train","X_val","y_val"],"lineno":18,"end_lineno":18,"col_offset":0,"end_col_offset":93},{"name":"mse","type":"assign","dependencies":["evaluate_model","model","X_test","y_test"],"lineno":21,"end_lineno":21,"col_offset":0,"end_col_offset":43},{"name":"print","type":"call","dependencies":["mse"],"lineno":22,"end_lineno":22,"col_offset":0,"end_col_offset":39},{"name":"create_model","type":"function","dependencies":["input_shape"],"lineno":31,"end_lineno":39,"col_offset":0,"end_col_offset":16},{"name":"train_model","type":"function","dependencies":["epochs","batch_size"],"lineno":42,"end_lineno":44,"col_offset":0,"end_col_offset":25},{"name":"evaluate_model","type":"function","dependencies":[],"lineno":47,"end_lineno":50,"col_offset":0,"end_col_offset":14}],"code":"# Example data loading and processing\n# Assuming X contains chroma features (shape: [num_samples, num_features])\n# and y contains pitch information (shape: [num_samples, 1])\n\n# Splitting the data into train, validation, and test sets\nX_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n# Reshaping y to match the model output shape\ny_train = y_train.reshape(-1, 1)\ny_val = y_val.reshape(-1, 1)\ny_test = y_test.reshape(-1, 1)\n\n# Creating the model\nmodel = create_model(input_shape=(X_train.shape[1],))\n\n# Training the model\nmodel, history = train_model(model, X_train, y_train, X_val, y_val, epochs=10, batch_size=32)\n\n# Evaluating the model\nmse = evaluate_model(model, X_test, y_test)\nprint(f'Mean Squared Error: {mse:.4f}')\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom sklearn.model_selection import train_test_split\n\n# Function to create a simple feedforward neural network model\ndef create_model(input_shape):\n    model = Sequential([\n        Dense(128, activation='relu', input_shape=input_shape),\n        Dense(64, activation='relu'),\n        Dense(32, activation='relu'),\n        Dense(1, activation='linear')  # Output layer for pitch prediction\n    ])\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n# Function to train the model\ndef train_model(model, X_train, y_train, X_val, y_val, epochs=10, batch_size=32):\n    history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=epochs, batch_size=batch_size, verbose=1)\n    return model, history\n\n# Function to evaluate the model\ndef evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    mse = np.mean(np.square(y_test - y_pred))  # Mean squared error\n    return mse\n","cell_id":"798b60b8-721c-41b6-929c-103bad3adbb8","dependencies":["train_test_split","X","y","create_model","train_model","evaluate_model","print","input_shape","epochs","batch_size"],"imports":["np","tf","Sequential","Dense","Dropout","train_test_split"],"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/var/folders/c3/g4m0wsf90vxfl77fq2qw6gjm0000gn/T/ipykernel_32856/298560252.py\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Splitting the data into train, validation, and test sets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_temp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_temp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_temp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_temp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'train_test_split' is not defined"],"ename":"NameError","evalue":"name 'train_test_split' is not defined","output_type":"error"}],"definitions":["X_train","X_temp","y_train","y_temp","X_val","X_test","y_val","y_test","model","history","mse","create_model","train_model","evaluate_model"],"definition_info":{"X_train":"","X_temp":"","y_train":"","y_temp":"","X_val":"","X_test":"","y_val":"","y_test":"","model":"","history":"","mse":"","create_model":"","train_model":"","evaluate_model":""},"time":"Wed, 10 Jul 2024 16:08:44 GMT"}]}]}